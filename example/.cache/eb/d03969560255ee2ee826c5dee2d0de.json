{
    "id": "../node_modules/ramda/es/partition.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./filter.js",
            "loc": { "line": 1, "column": 19 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/partition.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/filter.js"
        },
        {
            "name": "./juxt.js",
            "loc": { "line": 2, "column": 17 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/partition.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/juxt.js"
        },
        {
            "name": "./reject.js",
            "loc": { "line": 3, "column": 19 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/partition.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/reject.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _filter = _interopRequireDefault(require(\"./filter.js\"));\n\nvar _juxt = _interopRequireDefault(require(\"./juxt.js\"));\n\nvar _reject = _interopRequireDefault(require(\"./reject.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\nvar partition =\n/*#__PURE__*/\n(0, _juxt.default)([_filter.default, _reject.default]);\nvar _default = partition;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 16, "column": 0 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 5, "column": 0 }
                },
                {
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 0 }
                },
                {
                    "name": "partition",
                    "generated": { "line": 40, "column": 4 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "generated": { "line": 40, "column": 13 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 13 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 16 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 29 }
                },
                {
                    "generated": { "line": 42, "column": 19 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 34 }
                },
                {
                    "name": "filter",
                    "generated": { "line": 42, "column": 20 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 35 }
                },
                {
                    "generated": { "line": 42, "column": 35 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 34 }
                },
                {
                    "name": "reject",
                    "generated": { "line": 42, "column": 37 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 43 }
                },
                {
                    "generated": { "line": 42, "column": 52 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 34 }
                },
                {
                    "generated": { "line": 42, "column": 53 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 29 }
                },
                {
                    "generated": { "line": 42, "column": 54 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 29, "column": 0 }
                },
                {
                    "name": "partition",
                    "generated": { "line": 43, "column": 15 },
                    "source": "../node_modules/ramda/es/partition.js",
                    "original": { "line": 30, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/partition.js": "import filter from './filter.js';\nimport juxt from './juxt.js';\nimport reject from './reject.js';\n\n/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\nvar partition = /*#__PURE__*/juxt([filter, reject]);\nexport default partition;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "d5f513405ca567d0ab9605be7a1e2b85",
    "cacheData": { "env": {} }
}
