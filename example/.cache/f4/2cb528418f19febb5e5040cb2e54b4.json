{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./internal/_curry2",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/apply.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_curry2.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply =\n/*#__PURE__*/\n(0, _curry.default)(function apply(fn, args) {\n  return fn.apply(this, args);\n});\nvar _default = apply;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 32, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 0 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 32, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 4 }
                },
                {
                    "generated": { "line": 32, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 9 }
                },
                {
                    "generated": { "line": 33, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 12 }
                },
                {
                    "generated": { "line": 34, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 25 }
                },
                {
                    "generated": { "line": 34, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 33 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 34, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 42 }
                },
                {
                    "generated": { "line": 34, "column": 34 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 33 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 34, "column": 35 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 48 }
                },
                {
                    "generated": { "line": 34, "column": 37 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 33 }
                },
                {
                    "name": "args",
                    "generated": { "line": 34, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 52 }
                },
                {
                    "generated": { "line": 34, "column": 43 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 33 }
                },
                {
                    "generated": { "line": 34, "column": 45 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 58 }
                },
                {
                    "generated": { "line": 35, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 2 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 35, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 9 }
                },
                {
                    "generated": { "line": 35, "column": 11 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 11 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 35, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 12 }
                },
                {
                    "generated": { "line": 35, "column": 17 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 9 }
                },
                {
                    "generated": { "line": 35, "column": 18 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 18 }
                },
                {
                    "generated": { "line": 35, "column": 22 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 9 }
                },
                {
                    "name": "args",
                    "generated": { "line": 35, "column": 24 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 24 }
                },
                {
                    "generated": { "line": 35, "column": 28 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 9 }
                },
                {
                    "generated": { "line": 35, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 24, "column": 2 }
                },
                {
                    "generated": { "line": 36, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 25, "column": 1 }
                },
                {
                    "generated": { "line": 36, "column": 1 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 25 }
                },
                {
                    "generated": { "line": 36, "column": 2 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 23, "column": 0 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 37, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/apply.js",
                    "original": { "line": 26, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/apply.js": "import _curry2 from './internal/_curry2';\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply = /*#__PURE__*/_curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\nexport default apply;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "322985a59b1fea7f216634de42a95e5b",
    "cacheData": { "env": {} }
}
