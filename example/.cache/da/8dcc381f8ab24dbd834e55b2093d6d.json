{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./internal/_complement",
            "loc": { "line": 1, "column": 24 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/none.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_complement.js"
        },
        {
            "name": "./internal/_curry2",
            "loc": { "line": 2, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/none.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./internal/_dispatchable",
            "loc": { "line": 3, "column": 26 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/none.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_dispatchable.js"
        },
        {
            "name": "./internal/_xany",
            "loc": { "line": 4, "column": 18 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/none.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_xany.js"
        },
        {
            "name": "./any",
            "loc": { "line": 5, "column": 16 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/none.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/any.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _complement2 = _interopRequireDefault(require(\"./internal/_complement\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2\"));\n\nvar _dispatchable2 = _interopRequireDefault(require(\"./internal/_dispatchable\"));\n\nvar _xany2 = _interopRequireDefault(require(\"./internal/_xany\"));\n\nvar _any = _interopRequireDefault(require(\"./any\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *      var isOdd = n => n % 2 === 1;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false\n */\nvar none =\n/*#__PURE__*/\n(0, _curry.default)(\n/*#__PURE__*/\n(0, _complement2.default)(\n/*#__PURE__*/\n(0, _dispatchable2.default)(['any'], _xany2.default, _any.default)));\nvar _default = none;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 16, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 5, "column": 0 }
                },
                {
                    "generated": { "line": 20, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 7, "column": 0 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 0 }
                },
                {
                    "name": "none",
                    "generated": { "line": 43, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 4 }
                },
                {
                    "generated": { "line": 43, "column": 8 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 8 }
                },
                {
                    "generated": { "line": 44, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 11 }
                },
                {
                    "generated": { "line": 45, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 24 }
                },
                {
                    "generated": { "line": 46, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 33 }
                },
                {
                    "generated": { "line": 47, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 46 }
                },
                {
                    "generated": { "line": 48, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 59 }
                },
                {
                    "generated": { "line": 49, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 72 }
                },
                {
                    "generated": { "line": 49, "column": 28 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 86 }
                },
                {
                    "generated": { "line": 49, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 87 }
                },
                {
                    "generated": { "line": 49, "column": 34 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 86 }
                },
                {
                    "generated": { "line": 49, "column": 35 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 72 }
                },
                {
                    "name": "_xany",
                    "generated": { "line": 49, "column": 37 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 95 }
                },
                {
                    "generated": { "line": 49, "column": 51 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 72 }
                },
                {
                    "name": "any",
                    "generated": { "line": 49, "column": 53 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 102 }
                },
                {
                    "generated": { "line": 49, "column": 65 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 72 }
                },
                {
                    "generated": { "line": 49, "column": 66 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 46 }
                },
                {
                    "generated": { "line": 49, "column": 67 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 24 }
                },
                {
                    "generated": { "line": 49, "column": 68 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 30, "column": 0 }
                },
                {
                    "name": "none",
                    "generated": { "line": 50, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/none.js",
                    "original": { "line": 31, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/none.js": "import _complement from './internal/_complement';\nimport _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xany from './internal/_xany';\nimport any from './any';\n\n/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *      var isOdd = n => n % 2 === 1;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false\n */\nvar none = /*#__PURE__*/_curry2( /*#__PURE__*/_complement( /*#__PURE__*/_dispatchable(['any'], _xany, any)));\nexport default none;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "41f15bb6579a11c0fa0d349fb4b57d9e",
    "cacheData": { "env": {} }
}
