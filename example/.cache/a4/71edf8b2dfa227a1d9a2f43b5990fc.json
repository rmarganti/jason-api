{
    "id": "../node_modules/ramda/es/unionWith.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_concat.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/unionWith.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_concat.js"
        },
        {
            "name": "./internal/_curry3.js",
            "loc": { "line": 2, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/unionWith.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry3.js"
        },
        {
            "name": "./uniqWith.js",
            "loc": { "line": 3, "column": 21 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/unionWith.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/uniqWith.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _concat2 = _interopRequireDefault(require(\"./internal/_concat.js\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry3.js\"));\n\nvar _uniqWith = _interopRequireDefault(require(\"./uniqWith.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      const l1 = [{a: 1}, {a: 2}];\n *      const l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith =\n/*#__PURE__*/\n(0, _curry.default)(function unionWith(pred, list1, list2) {\n  return (0, _uniqWith.default)(pred, (0, _concat2.default)(list1, list2));\n});\nvar _default = unionWith;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 16, "column": 0 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 5, "column": 0 }
                },
                {
                    "generated": { "line": 38, "column": 0 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "unionWith",
                    "generated": { "line": 38, "column": 4 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 4 }
                },
                {
                    "generated": { "line": 38, "column": 13 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 13 }
                },
                {
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 16 }
                },
                {
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 29 }
                },
                {
                    "generated": { "line": 40, "column": 20 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "name": "unionWith",
                    "generated": { "line": 40, "column": 29 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 46 }
                },
                {
                    "generated": { "line": 40, "column": 38 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "name": "pred",
                    "generated": { "line": 40, "column": 39 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 56 }
                },
                {
                    "generated": { "line": 40, "column": 43 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "name": "list1",
                    "generated": { "line": 40, "column": 45 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 62 }
                },
                {
                    "generated": { "line": 40, "column": 50 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "name": "list2",
                    "generated": { "line": 40, "column": 52 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 69 }
                },
                {
                    "generated": { "line": 40, "column": 57 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "generated": { "line": 40, "column": 59 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 76 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "generated": { "line": 41, "column": 9 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "name": "pred",
                    "generated": { "line": 41, "column": 32 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 18 }
                },
                {
                    "generated": { "line": 41, "column": 36 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "generated": { "line": 41, "column": 38 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 24 }
                },
                {
                    "name": "list1",
                    "generated": { "line": 41, "column": 60 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 32 }
                },
                {
                    "generated": { "line": 41, "column": 65 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 24 }
                },
                {
                    "name": "list2",
                    "generated": { "line": 41, "column": 67 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 39 }
                },
                {
                    "generated": { "line": 41, "column": 72 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 24 }
                },
                {
                    "generated": { "line": 41, "column": 73 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "generated": { "line": 41, "column": 74 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 29, "column": 1 }
                },
                {
                    "generated": { "line": 42, "column": 1 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 29 }
                },
                {
                    "generated": { "line": 42, "column": 2 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "unionWith",
                    "generated": { "line": 43, "column": 15 },
                    "source": "../node_modules/ramda/es/unionWith.js",
                    "original": { "line": 30, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/unionWith.js": "import _concat from './internal/_concat.js';\nimport _curry3 from './internal/_curry3.js';\nimport uniqWith from './uniqWith.js';\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      const l1 = [{a: 1}, {a: 2}];\n *      const l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith = /*#__PURE__*/_curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\nexport default unionWith;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "bd6714e1f1b05a344d53d63b78a53444",
    "cacheData": { "env": {} }
}
