{
    "id": "../node_modules/ramda/es/splitEvery.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry2.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/splitEvery.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./slice.js",
            "loc": { "line": 2, "column": 18 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/splitEvery.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/slice.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _slice = _interopRequireDefault(require(\"./slice.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nvar splitEvery =\n/*#__PURE__*/\n(0, _curry.default)(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n\n  var result = [];\n  var idx = 0;\n\n  while (idx < list.length) {\n    result.push((0, _slice.default)(idx, idx += n, list));\n  }\n\n  return result;\n});\nvar _default = splitEvery;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 31, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 0 }
                },
                {
                    "name": "splitEvery",
                    "generated": { "line": 31, "column": 4 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 4 }
                },
                {
                    "generated": { "line": 31, "column": 14 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 14 }
                },
                {
                    "generated": { "line": 32, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 17 }
                },
                {
                    "generated": { "line": 33, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 30 }
                },
                {
                    "generated": { "line": 33, "column": 20 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 38 }
                },
                {
                    "name": "splitEvery",
                    "generated": { "line": 33, "column": 29 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 47 }
                },
                {
                    "generated": { "line": 33, "column": 39 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 38 }
                },
                {
                    "name": "n",
                    "generated": { "line": 33, "column": 40 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 58 }
                },
                {
                    "generated": { "line": 33, "column": 41 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 38 }
                },
                {
                    "name": "list",
                    "generated": { "line": 33, "column": 43 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 61 }
                },
                {
                    "generated": { "line": 33, "column": 47 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 38 }
                },
                {
                    "generated": { "line": 33, "column": 49 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 67 }
                },
                {
                    "generated": { "line": 34, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 22, "column": 2 }
                },
                {
                    "name": "n",
                    "generated": { "line": 34, "column": 6 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 22, "column": 6 }
                },
                {
                    "generated": { "line": 34, "column": 7 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 22, "column": 7 }
                },
                {
                    "generated": { "line": 34, "column": 11 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 22, "column": 11 }
                },
                {
                    "generated": { "line": 34, "column": 12 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 22, "column": 2 }
                },
                {
                    "generated": { "line": 34, "column": 14 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 22, "column": 14 }
                },
                {
                    "generated": { "line": 35, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 23, "column": 4 }
                },
                {
                    "generated": { "line": 35, "column": 10 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 23, "column": 10 }
                },
                {
                    "name": "Error",
                    "generated": { "line": 35, "column": 14 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 23, "column": 14 }
                },
                {
                    "generated": { "line": 35, "column": 19 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 23, "column": 10 }
                },
                {
                    "generated": { "line": 35, "column": 20 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 23, "column": 20 }
                },
                {
                    "generated": { "line": 35, "column": 77 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 23, "column": 10 }
                },
                {
                    "generated": { "line": 35, "column": 78 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 23, "column": 4 }
                },
                {
                    "generated": { "line": 36, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 24, "column": 3 }
                },
                {
                    "generated": { "line": 38, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 25, "column": 2 }
                },
                {
                    "name": "result",
                    "generated": { "line": 38, "column": 6 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 25, "column": 6 }
                },
                {
                    "generated": { "line": 38, "column": 12 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 25, "column": 12 }
                },
                {
                    "generated": { "line": 38, "column": 15 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 25, "column": 15 }
                },
                {
                    "generated": { "line": 38, "column": 17 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 25, "column": 2 }
                },
                {
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 26, "column": 2 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 39, "column": 6 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 26, "column": 6 }
                },
                {
                    "generated": { "line": 39, "column": 9 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 26, "column": 9 }
                },
                {
                    "generated": { "line": 39, "column": 12 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 26, "column": 12 }
                },
                {
                    "generated": { "line": 39, "column": 13 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 26, "column": 2 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 27, "column": 2 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 41, "column": 9 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 27, "column": 9 }
                },
                {
                    "generated": { "line": 41, "column": 12 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 27, "column": 12 }
                },
                {
                    "name": "list",
                    "generated": { "line": 41, "column": 15 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 27, "column": 15 }
                },
                {
                    "generated": { "line": 41, "column": 19 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 27, "column": 19 }
                },
                {
                    "name": "length",
                    "generated": { "line": 41, "column": 20 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 27, "column": 20 }
                },
                {
                    "generated": { "line": 41, "column": 26 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 27, "column": 2 }
                },
                {
                    "generated": { "line": 41, "column": 28 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 27, "column": 28 }
                },
                {
                    "name": "result",
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 4 }
                },
                {
                    "name": "result",
                    "generated": { "line": 42, "column": 4 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 4 }
                },
                {
                    "generated": { "line": 42, "column": 10 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 10 }
                },
                {
                    "name": "push",
                    "generated": { "line": 42, "column": 11 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 11 }
                },
                {
                    "generated": { "line": 42, "column": 15 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 4 }
                },
                {
                    "generated": { "line": 42, "column": 16 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 16 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 42, "column": 36 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 22 }
                },
                {
                    "generated": { "line": 42, "column": 39 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 16 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 42, "column": 41 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 27 }
                },
                {
                    "generated": { "line": 42, "column": 44 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 30 }
                },
                {
                    "name": "n",
                    "generated": { "line": 42, "column": 48 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 34 }
                },
                {
                    "generated": { "line": 42, "column": 49 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 16 }
                },
                {
                    "name": "list",
                    "generated": { "line": 42, "column": 51 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 37 }
                },
                {
                    "generated": { "line": 42, "column": 55 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 16 }
                },
                {
                    "generated": { "line": 42, "column": 56 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 28, "column": 4 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 29, "column": 3 }
                },
                {
                    "generated": { "line": 45, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 30, "column": 2 }
                },
                {
                    "name": "result",
                    "generated": { "line": 45, "column": 9 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 30, "column": 9 }
                },
                {
                    "generated": { "line": 45, "column": 15 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 30, "column": 2 }
                },
                {
                    "generated": { "line": 46, "column": 0 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 31, "column": 1 }
                },
                {
                    "generated": { "line": 46, "column": 1 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 30 }
                },
                {
                    "generated": { "line": 46, "column": 2 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 21, "column": 0 }
                },
                {
                    "name": "splitEvery",
                    "generated": { "line": 47, "column": 15 },
                    "source": "../node_modules/ramda/es/splitEvery.js",
                    "original": { "line": 32, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/splitEvery.js": "import _curry2 from './internal/_curry2.js';\nimport slice from './slice.js';\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nvar splitEvery = /*#__PURE__*/_curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n  var result = [];\n  var idx = 0;\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n  return result;\n});\nexport default splitEvery;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "74a8a1b677e31427b1256178268ab520",
    "cacheData": { "env": {} }
}
