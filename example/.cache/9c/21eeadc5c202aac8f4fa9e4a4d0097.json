{
    "id": "../node_modules/ramda/es/then.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry2.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/then.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./internal/_assertPromise.js",
            "loc": { "line": 2, "column": 27 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/then.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_assertPromise.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _assertPromise2 = _interopRequireDefault(require(\"./internal/_assertPromise.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the result of applying the onSuccess function to the value inside\n * a successfully resolved promise. This is useful for working with promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @category Function\n * @sig (a -> b) -> (Promise e a) -> (Promise e b)\n * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)\n * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(onSuccess)`\n * @see R.otherwise\n * @example\n *\n *      var makeQuery = (email) => ({ query: { email }});\n *\n *      //getMemberName :: String -> Promise ({firstName, lastName})\n *      var getMemberName = R.pipe(\n *        makeQuery,\n *        fetchMember,\n *        R.then(R.pick(['firstName', 'lastName']))\n *      );\n */\nvar then =\n/*#__PURE__*/\n(0, _curry.default)(function then(f, p) {\n  (0, _assertPromise2.default)('then', p);\n  return p.then(f);\n});\nvar _default = then;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 0 }
                },
                {
                    "name": "then",
                    "generated": { "line": 39, "column": 4 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "generated": { "line": 39, "column": 8 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 8 }
                },
                {
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 11 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 24 }
                },
                {
                    "generated": { "line": 41, "column": 20 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 32 }
                },
                {
                    "name": "then",
                    "generated": { "line": 41, "column": 29 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 41 }
                },
                {
                    "generated": { "line": 41, "column": 33 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 32 }
                },
                {
                    "name": "f",
                    "generated": { "line": 41, "column": 34 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 46 }
                },
                {
                    "generated": { "line": 41, "column": 35 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 32 }
                },
                {
                    "name": "p",
                    "generated": { "line": 41, "column": 37 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 49 }
                },
                {
                    "generated": { "line": 41, "column": 38 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 32 }
                },
                {
                    "generated": { "line": 41, "column": 40 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 52 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 30, "column": 2 }
                },
                {
                    "generated": { "line": 42, "column": 31 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 30, "column": 17 }
                },
                {
                    "generated": { "line": 42, "column": 37 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 30, "column": 2 }
                },
                {
                    "name": "p",
                    "generated": { "line": 42, "column": 39 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 30, "column": 25 }
                },
                {
                    "generated": { "line": 42, "column": 40 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 30, "column": 2 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 32, "column": 2 }
                },
                {
                    "name": "p",
                    "generated": { "line": 43, "column": 9 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 32, "column": 9 }
                },
                {
                    "generated": { "line": 43, "column": 10 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 32, "column": 10 }
                },
                {
                    "name": "then",
                    "generated": { "line": 43, "column": 11 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 32, "column": 11 }
                },
                {
                    "generated": { "line": 43, "column": 15 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 32, "column": 9 }
                },
                {
                    "name": "f",
                    "generated": { "line": 43, "column": 16 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 32, "column": 16 }
                },
                {
                    "generated": { "line": 43, "column": 17 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 32, "column": 9 }
                },
                {
                    "generated": { "line": 43, "column": 18 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 32, "column": 2 }
                },
                {
                    "generated": { "line": 44, "column": 0 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 33, "column": 1 }
                },
                {
                    "generated": { "line": 44, "column": 1 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 24 }
                },
                {
                    "generated": { "line": 44, "column": 2 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 29, "column": 0 }
                },
                {
                    "name": "then",
                    "generated": { "line": 45, "column": 15 },
                    "source": "../node_modules/ramda/es/then.js",
                    "original": { "line": 34, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/then.js": "import _curry2 from './internal/_curry2.js';\nimport _assertPromise from './internal/_assertPromise.js';\n\n/**\n * Returns the result of applying the onSuccess function to the value inside\n * a successfully resolved promise. This is useful for working with promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @category Function\n * @sig (a -> b) -> (Promise e a) -> (Promise e b)\n * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)\n * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(onSuccess)`\n * @see R.otherwise\n * @example\n *\n *      var makeQuery = (email) => ({ query: { email }});\n *\n *      //getMemberName :: String -> Promise ({firstName, lastName})\n *      var getMemberName = R.pipe(\n *        makeQuery,\n *        fetchMember,\n *        R.then(R.pick(['firstName', 'lastName']))\n *      );\n */\nvar then = /*#__PURE__*/_curry2(function then(f, p) {\n  _assertPromise('then', p);\n\n  return p.then(f);\n});\nexport default then;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "25c8f6eea24a2068ba8453cd0934928f",
    "cacheData": { "env": {} }
}
