{
    "id": "../node_modules/ramda/es/dropRepeats.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry1.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/dropRepeats.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry1.js"
        },
        {
            "name": "./internal/_dispatchable.js",
            "loc": { "line": 2, "column": 26 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/dropRepeats.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_dispatchable.js"
        },
        {
            "name": "./internal/_xdropRepeatsWith.js",
            "loc": { "line": 3, "column": 30 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/dropRepeats.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_xdropRepeatsWith.js"
        },
        {
            "name": "./dropRepeatsWith.js",
            "loc": { "line": 4, "column": 28 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/dropRepeats.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/dropRepeatsWith.js"
        },
        {
            "name": "./equals.js",
            "loc": { "line": 5, "column": 19 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/dropRepeats.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/equals.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\n\nvar _dispatchable2 = _interopRequireDefault(require(\"./internal/_dispatchable.js\"));\n\nvar _xdropRepeatsWith2 = _interopRequireDefault(require(\"./internal/_xdropRepeatsWith.js\"));\n\nvar _dropRepeatsWith = _interopRequireDefault(require(\"./dropRepeatsWith.js\"));\n\nvar _equals = _interopRequireDefault(require(\"./equals.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nvar dropRepeats =\n/*#__PURE__*/\n(0, _curry.default)(\n/*#__PURE__*/\n(0, _dispatchable2.default)([],\n/*#__PURE__*/\n(0, _xdropRepeatsWith2.default)(_equals.default),\n/*#__PURE__*/\n(0, _dropRepeatsWith.default)(_equals.default)));\nvar _default = dropRepeats;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 16, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 5, "column": 0 }
                },
                {
                    "generated": { "line": 20, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 7, "column": 0 }
                },
                {
                    "generated": { "line": 38, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 0 }
                },
                {
                    "name": "dropRepeats",
                    "generated": { "line": 38, "column": 4 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 4 }
                },
                {
                    "generated": { "line": 38, "column": 15 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 15 }
                },
                {
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 18 }
                },
                {
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 31 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 40 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 53 }
                },
                {
                    "generated": { "line": 42, "column": 28 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 67 }
                },
                {
                    "generated": { "line": 42, "column": 30 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 53 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 71 }
                },
                {
                    "generated": { "line": 44, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 84 }
                },
                {
                    "name": "equals",
                    "generated": { "line": 44, "column": 32 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 102 }
                },
                {
                    "generated": { "line": 44, "column": 47 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 84 }
                },
                {
                    "generated": { "line": 44, "column": 48 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 53 }
                },
                {
                    "generated": { "line": 45, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 111 }
                },
                {
                    "generated": { "line": 46, "column": 0 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 124 }
                },
                {
                    "name": "equals",
                    "generated": { "line": 46, "column": 30 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 140 }
                },
                {
                    "generated": { "line": 46, "column": 45 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 124 }
                },
                {
                    "generated": { "line": 46, "column": 46 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 53 }
                },
                {
                    "generated": { "line": 46, "column": 47 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 31 }
                },
                {
                    "generated": { "line": 46, "column": 48 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 25, "column": 0 }
                },
                {
                    "name": "dropRepeats",
                    "generated": { "line": 47, "column": 15 },
                    "source": "../node_modules/ramda/es/dropRepeats.js",
                    "original": { "line": 26, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/dropRepeats.js": "import _curry1 from './internal/_curry1.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xdropRepeatsWith from './internal/_xdropRepeatsWith.js';\nimport dropRepeatsWith from './dropRepeatsWith.js';\nimport equals from './equals.js';\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nvar dropRepeats = /*#__PURE__*/_curry1( /*#__PURE__*/_dispatchable([], /*#__PURE__*/_xdropRepeatsWith(equals), /*#__PURE__*/dropRepeatsWith(equals)));\nexport default dropRepeats;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "5d81777acedc6cab6d8aae15465ddda1",
    "cacheData": { "env": {} }
}
