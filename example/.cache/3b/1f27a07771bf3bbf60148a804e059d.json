{
    "id": "../node_modules/ramda/es/pluck.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry2.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/pluck.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./map.js",
            "loc": { "line": 2, "column": 16 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/pluck.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/map.js"
        },
        {
            "name": "./prop.js",
            "loc": { "line": 3, "column": 17 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/pluck.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/prop.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _map = _interopRequireDefault(require(\"./map.js\"));\n\nvar _prop = _interopRequireDefault(require(\"./prop.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      var getAges = R.pluck('age');\n *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]\n *\n *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck =\n/*#__PURE__*/\n(0, _curry.default)(function pluck(p, list) {\n  return (0, _map.default)((0, _prop.default)(p), list);\n});\nvar _default = pluck;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 16, "column": 0 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 5, "column": 0 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 0 }
                },
                {
                    "name": "pluck",
                    "generated": { "line": 43, "column": 4 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 4 }
                },
                {
                    "generated": { "line": 43, "column": 9 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 9 }
                },
                {
                    "generated": { "line": 44, "column": 0 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 12 }
                },
                {
                    "generated": { "line": 45, "column": 0 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 25 }
                },
                {
                    "generated": { "line": 45, "column": 20 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 33 }
                },
                {
                    "name": "pluck",
                    "generated": { "line": 45, "column": 29 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 42 }
                },
                {
                    "generated": { "line": 45, "column": 34 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 33 }
                },
                {
                    "name": "p",
                    "generated": { "line": 45, "column": 35 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 48 }
                },
                {
                    "generated": { "line": 45, "column": 36 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 33 }
                },
                {
                    "name": "list",
                    "generated": { "line": 45, "column": 38 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 51 }
                },
                {
                    "generated": { "line": 45, "column": 42 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 33 }
                },
                {
                    "generated": { "line": 45, "column": 44 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 57 }
                },
                {
                    "generated": { "line": 46, "column": 0 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 33, "column": 2 }
                },
                {
                    "generated": { "line": 46, "column": 9 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "generated": { "line": 46, "column": 27 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 33, "column": 13 }
                },
                {
                    "name": "p",
                    "generated": { "line": 46, "column": 46 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 33, "column": 18 }
                },
                {
                    "generated": { "line": 46, "column": 47 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 33, "column": 13 }
                },
                {
                    "generated": { "line": 46, "column": 48 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "name": "list",
                    "generated": { "line": 46, "column": 50 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 33, "column": 22 }
                },
                {
                    "generated": { "line": 46, "column": 54 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "generated": { "line": 46, "column": 55 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 33, "column": 2 }
                },
                {
                    "generated": { "line": 47, "column": 0 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 34, "column": 1 }
                },
                {
                    "generated": { "line": 47, "column": 1 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 25 }
                },
                {
                    "generated": { "line": 47, "column": 2 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 32, "column": 0 }
                },
                {
                    "name": "pluck",
                    "generated": { "line": 48, "column": 15 },
                    "source": "../node_modules/ramda/es/pluck.js",
                    "original": { "line": 35, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/pluck.js": "import _curry2 from './internal/_curry2.js';\nimport map from './map.js';\nimport prop from './prop.js';\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      var getAges = R.pluck('age');\n *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]\n *\n *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck = /*#__PURE__*/_curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\nexport default pluck;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "6347ed7d243099b81a8fb6391ee1a512",
    "cacheData": { "env": {} }
}
