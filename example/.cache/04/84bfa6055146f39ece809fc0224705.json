{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./internal/_curry1",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/binary.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_curry1.js"
        },
        {
            "name": "./nAry",
            "loc": { "line": 2, "column": 17 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/binary.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/nAry.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1\"));\n\nvar _nAry = _interopRequireDefault(require(\"./nAry\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary =\n/*#__PURE__*/\n(0, _curry.default)(function binary(fn) {\n  return (0, _nAry.default)(2, fn);\n});\nvar _default = binary;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 0 }
                },
                {
                    "name": "binary",
                    "generated": { "line": 42, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 4 }
                },
                {
                    "generated": { "line": 42, "column": 10 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 10 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 13 }
                },
                {
                    "generated": { "line": 44, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 26 }
                },
                {
                    "generated": { "line": 44, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 34 }
                },
                {
                    "name": "binary",
                    "generated": { "line": 44, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 43 }
                },
                {
                    "generated": { "line": 44, "column": 35 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 34 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 44, "column": 36 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 50 }
                },
                {
                    "generated": { "line": 44, "column": 38 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 34 }
                },
                {
                    "generated": { "line": 44, "column": 40 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 54 }
                },
                {
                    "generated": { "line": 45, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 33, "column": 2 }
                },
                {
                    "generated": { "line": 45, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "generated": { "line": 45, "column": 28 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 33, "column": 14 }
                },
                {
                    "generated": { "line": 45, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 45, "column": 31 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 33, "column": 17 }
                },
                {
                    "generated": { "line": 45, "column": 33 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "generated": { "line": 45, "column": 34 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 33, "column": 2 }
                },
                {
                    "generated": { "line": 46, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 34, "column": 1 }
                },
                {
                    "generated": { "line": 46, "column": 1 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 26 }
                },
                {
                    "generated": { "line": 46, "column": 2 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 32, "column": 0 }
                },
                {
                    "name": "binary",
                    "generated": { "line": 47, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/binary.js",
                    "original": { "line": 35, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/binary.js": "import _curry1 from './internal/_curry1';\nimport nAry from './nAry';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary = /*#__PURE__*/_curry1(function binary(fn) {\n  return nAry(2, fn);\n});\nexport default binary;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "ed14459d1a68dbcbecf6e99c2e5da0c9",
    "cacheData": { "env": {} }
}
