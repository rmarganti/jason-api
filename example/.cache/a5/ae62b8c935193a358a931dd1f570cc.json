{
    "id": "../node_modules/ramda/es/call.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./curry.js",
            "loc": { "line": 1, "column": 18 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/call.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/curry.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./curry.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig (*... -> a),*... -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      const indentN = R.pipe(R.repeat(' '),\n *                           R.join(''),\n *                           R.replace(/^(?!$)/gm));\n *\n *      const format = R.converge(R.call, [\n *                                  R.pipe(R.prop('indent'), indentN),\n *                                  R.prop('value')\n *                              ]);\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nvar call =\n/*#__PURE__*/\n(0, _curry.default)(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\nvar _default = call;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 44, "column": 0 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 0 }
                },
                {
                    "name": "call",
                    "generated": { "line": 44, "column": 4 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 4 }
                },
                {
                    "generated": { "line": 44, "column": 8 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 8 }
                },
                {
                    "generated": { "line": 45, "column": 0 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 11 }
                },
                {
                    "generated": { "line": 46, "column": 0 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 24 }
                },
                {
                    "generated": { "line": 46, "column": 20 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 30 }
                },
                {
                    "name": "call",
                    "generated": { "line": 46, "column": 29 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 39 }
                },
                {
                    "generated": { "line": 46, "column": 33 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 30 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 46, "column": 34 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 44 }
                },
                {
                    "generated": { "line": 46, "column": 36 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 30 }
                },
                {
                    "generated": { "line": 46, "column": 38 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 48 }
                },
                {
                    "generated": { "line": 47, "column": 0 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 2 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 47, "column": 9 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 9 }
                },
                {
                    "generated": { "line": 47, "column": 11 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 11 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 47, "column": 12 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 12 }
                },
                {
                    "generated": { "line": 47, "column": 17 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 9 }
                },
                {
                    "generated": { "line": 47, "column": 18 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 18 }
                },
                {
                    "generated": { "line": 47, "column": 22 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 9 }
                },
                {
                    "name": "Array",
                    "generated": { "line": 47, "column": 24 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 24 }
                },
                {
                    "generated": { "line": 47, "column": 29 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 29 }
                },
                {
                    "name": "prototype",
                    "generated": { "line": 47, "column": 30 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 30 }
                },
                {
                    "generated": { "line": 47, "column": 39 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 24 }
                },
                {
                    "name": "slice",
                    "generated": { "line": 47, "column": 40 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 40 }
                },
                {
                    "generated": { "line": 47, "column": 45 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 24 }
                },
                {
                    "name": "call",
                    "generated": { "line": 47, "column": 46 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 46 }
                },
                {
                    "generated": { "line": 47, "column": 50 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 24 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 47, "column": 51 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 51 }
                },
                {
                    "generated": { "line": 47, "column": 60 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 24 }
                },
                {
                    "generated": { "line": 47, "column": 62 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 62 }
                },
                {
                    "generated": { "line": 47, "column": 63 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 24 }
                },
                {
                    "generated": { "line": 47, "column": 64 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 9 }
                },
                {
                    "generated": { "line": 47, "column": 65 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 36, "column": 2 }
                },
                {
                    "generated": { "line": 48, "column": 0 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 37, "column": 1 }
                },
                {
                    "generated": { "line": 48, "column": 1 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 24 }
                },
                {
                    "generated": { "line": 48, "column": 2 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 35, "column": 0 }
                },
                {
                    "name": "call",
                    "generated": { "line": 49, "column": 15 },
                    "source": "../node_modules/ramda/es/call.js",
                    "original": { "line": 38, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/call.js": "import curry from './curry.js';\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig (*... -> a),*... -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      const indentN = R.pipe(R.repeat(' '),\n *                           R.join(''),\n *                           R.replace(/^(?!$)/gm));\n *\n *      const format = R.converge(R.call, [\n *                                  R.pipe(R.prop('indent'), indentN),\n *                                  R.prop('value')\n *                              ]);\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nvar call = /*#__PURE__*/curry(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\nexport default call;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "64521a47433086e2eb40d0d6d151fe6d",
    "cacheData": { "env": {} }
}
