{
    "id": "../node_modules/ramda/es/propSatisfies.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry3.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/propSatisfies.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry3.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry3.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise. You can test multiple properties with\n * [`R.where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.where, R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */\nvar propSatisfies =\n/*#__PURE__*/\n(0, _curry.default)(function propSatisfies(pred, name, obj) {\n  return pred(obj[name]);\n});\nvar _default = propSatisfies;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 31, "column": 0 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 0 }
                },
                {
                    "name": "propSatisfies",
                    "generated": { "line": 31, "column": 4 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 4 }
                },
                {
                    "generated": { "line": 31, "column": 17 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 17 }
                },
                {
                    "generated": { "line": 32, "column": 0 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 20 }
                },
                {
                    "generated": { "line": 33, "column": 0 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 33 }
                },
                {
                    "generated": { "line": 33, "column": 20 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 41 }
                },
                {
                    "name": "propSatisfies",
                    "generated": { "line": 33, "column": 29 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 50 }
                },
                {
                    "generated": { "line": 33, "column": 42 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 41 }
                },
                {
                    "name": "pred",
                    "generated": { "line": 33, "column": 43 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 64 }
                },
                {
                    "generated": { "line": 33, "column": 47 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 41 }
                },
                {
                    "name": "name",
                    "generated": { "line": 33, "column": 49 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 70 }
                },
                {
                    "generated": { "line": 33, "column": 53 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 41 }
                },
                {
                    "name": "obj",
                    "generated": { "line": 33, "column": 55 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 76 }
                },
                {
                    "generated": { "line": 33, "column": 58 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 41 }
                },
                {
                    "generated": { "line": 33, "column": 60 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 81 }
                },
                {
                    "generated": { "line": 34, "column": 0 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 23, "column": 2 }
                },
                {
                    "name": "pred",
                    "generated": { "line": 34, "column": 9 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 23, "column": 9 }
                },
                {
                    "generated": { "line": 34, "column": 13 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 23, "column": 13 }
                },
                {
                    "name": "obj",
                    "generated": { "line": 34, "column": 14 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 23, "column": 14 }
                },
                {
                    "generated": { "line": 34, "column": 17 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 23, "column": 17 }
                },
                {
                    "name": "name",
                    "generated": { "line": 34, "column": 18 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 23, "column": 18 }
                },
                {
                    "generated": { "line": 34, "column": 22 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 23, "column": 17 }
                },
                {
                    "generated": { "line": 34, "column": 23 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 23, "column": 13 }
                },
                {
                    "generated": { "line": 34, "column": 24 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 23, "column": 2 }
                },
                {
                    "generated": { "line": 35, "column": 0 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 24, "column": 1 }
                },
                {
                    "generated": { "line": 35, "column": 1 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 33 }
                },
                {
                    "generated": { "line": 35, "column": 2 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 22, "column": 0 }
                },
                {
                    "name": "propSatisfies",
                    "generated": { "line": 36, "column": 15 },
                    "source": "../node_modules/ramda/es/propSatisfies.js",
                    "original": { "line": 25, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/propSatisfies.js": "import _curry3 from './internal/_curry3.js';\n\n/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise. You can test multiple properties with\n * [`R.where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.where, R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */\nvar propSatisfies = /*#__PURE__*/_curry3(function propSatisfies(pred, name, obj) {\n  return pred(obj[name]);\n});\nexport default propSatisfies;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "05e7dbca612d0fc2e6ed4d2b3e6dd502",
    "cacheData": { "env": {} }
}
