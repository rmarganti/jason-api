{
    "id": "../node_modules/ramda/es/unary.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry1.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/unary.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry1.js"
        },
        {
            "name": "./nAry.js",
            "loc": { "line": 2, "column": 17 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/unary.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/nAry.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\n\nvar _nAry = _interopRequireDefault(require(\"./nAry.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> b) -> (a -> b)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      const takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nvar unary =\n/*#__PURE__*/\n(0, _curry.default)(function unary(fn) {\n  return (0, _nAry.default)(1, fn);\n});\nvar _default = unary;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 0 }
                },
                {
                    "name": "unary",
                    "generated": { "line": 42, "column": 4 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 4 }
                },
                {
                    "generated": { "line": 42, "column": 9 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 9 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 12 }
                },
                {
                    "generated": { "line": 44, "column": 0 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 25 }
                },
                {
                    "generated": { "line": 44, "column": 20 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 33 }
                },
                {
                    "name": "unary",
                    "generated": { "line": 44, "column": 29 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 42 }
                },
                {
                    "generated": { "line": 44, "column": 34 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 33 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 44, "column": 35 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 48 }
                },
                {
                    "generated": { "line": 44, "column": 37 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 33 }
                },
                {
                    "generated": { "line": 44, "column": 39 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 52 }
                },
                {
                    "generated": { "line": 45, "column": 0 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 33, "column": 2 }
                },
                {
                    "generated": { "line": 45, "column": 9 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "generated": { "line": 45, "column": 28 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 33, "column": 14 }
                },
                {
                    "generated": { "line": 45, "column": 29 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 45, "column": 31 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 33, "column": 17 }
                },
                {
                    "generated": { "line": 45, "column": 33 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "generated": { "line": 45, "column": 34 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 33, "column": 2 }
                },
                {
                    "generated": { "line": 46, "column": 0 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 34, "column": 1 }
                },
                {
                    "generated": { "line": 46, "column": 1 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 25 }
                },
                {
                    "generated": { "line": 46, "column": 2 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 32, "column": 0 }
                },
                {
                    "name": "unary",
                    "generated": { "line": 47, "column": 15 },
                    "source": "../node_modules/ramda/es/unary.js",
                    "original": { "line": 35, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/unary.js": "import _curry1 from './internal/_curry1.js';\nimport nAry from './nAry.js';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> b) -> (a -> b)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      const takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nvar unary = /*#__PURE__*/_curry1(function unary(fn) {\n  return nAry(1, fn);\n});\nexport default unary;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "7cf886c2d2ec457aaf5a375e732ec32a",
    "cacheData": { "env": {} }
}
