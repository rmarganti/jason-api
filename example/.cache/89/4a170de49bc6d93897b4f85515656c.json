{
    "id": "../node_modules/ramda/es/reduceRight.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry3.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/reduceRight.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry3.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry3.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nvar reduceRight =\n/*#__PURE__*/\n(0, _curry.default)(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n\n  return acc;\n});\nvar _default = reduceRight;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 0 }
                },
                {
                    "name": "reduceRight",
                    "generated": { "line": 54, "column": 4 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 4 }
                },
                {
                    "generated": { "line": 54, "column": 15 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 15 }
                },
                {
                    "generated": { "line": 55, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 18 }
                },
                {
                    "generated": { "line": 56, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 31 }
                },
                {
                    "generated": { "line": 56, "column": 20 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 39 }
                },
                {
                    "name": "reduceRight",
                    "generated": { "line": 56, "column": 29 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 48 }
                },
                {
                    "generated": { "line": 56, "column": 40 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 39 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 56, "column": 41 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 60 }
                },
                {
                    "generated": { "line": 56, "column": 43 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 39 }
                },
                {
                    "name": "acc",
                    "generated": { "line": 56, "column": 45 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 64 }
                },
                {
                    "generated": { "line": 56, "column": 48 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 39 }
                },
                {
                    "name": "list",
                    "generated": { "line": 56, "column": 50 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 69 }
                },
                {
                    "generated": { "line": 56, "column": 54 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 39 }
                },
                {
                    "generated": { "line": 56, "column": 56 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 75 }
                },
                {
                    "generated": { "line": 57, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 46, "column": 2 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 57, "column": 6 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 46, "column": 6 }
                },
                {
                    "generated": { "line": 57, "column": 9 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 46, "column": 9 }
                },
                {
                    "name": "list",
                    "generated": { "line": 57, "column": 12 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 46, "column": 12 }
                },
                {
                    "generated": { "line": 57, "column": 16 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 46, "column": 16 }
                },
                {
                    "name": "length",
                    "generated": { "line": 57, "column": 17 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 46, "column": 17 }
                },
                {
                    "generated": { "line": 57, "column": 23 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 46, "column": 12 }
                },
                {
                    "generated": { "line": 57, "column": 26 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 46, "column": 26 }
                },
                {
                    "generated": { "line": 57, "column": 27 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 46, "column": 2 }
                },
                {
                    "generated": { "line": 59, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 47, "column": 2 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 59, "column": 9 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 47, "column": 9 }
                },
                {
                    "generated": { "line": 59, "column": 12 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 47, "column": 12 }
                },
                {
                    "generated": { "line": 59, "column": 16 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 47, "column": 16 }
                },
                {
                    "generated": { "line": 59, "column": 17 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 47, "column": 2 }
                },
                {
                    "generated": { "line": 59, "column": 19 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 47, "column": 19 }
                },
                {
                    "name": "acc",
                    "generated": { "line": 60, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 4 }
                },
                {
                    "name": "acc",
                    "generated": { "line": 60, "column": 4 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 4 }
                },
                {
                    "generated": { "line": 60, "column": 7 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 7 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 60, "column": 10 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 10 }
                },
                {
                    "generated": { "line": 60, "column": 12 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 12 }
                },
                {
                    "name": "list",
                    "generated": { "line": 60, "column": 13 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 13 }
                },
                {
                    "generated": { "line": 60, "column": 17 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 17 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 60, "column": 18 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 18 }
                },
                {
                    "generated": { "line": 60, "column": 21 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 17 }
                },
                {
                    "generated": { "line": 60, "column": 22 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 12 }
                },
                {
                    "name": "acc",
                    "generated": { "line": 60, "column": 24 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 24 }
                },
                {
                    "generated": { "line": 60, "column": 27 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 12 }
                },
                {
                    "generated": { "line": 60, "column": 28 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 48, "column": 4 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 61, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 49, "column": 4 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 61, "column": 4 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 49, "column": 4 }
                },
                {
                    "generated": { "line": 61, "column": 7 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 49, "column": 7 }
                },
                {
                    "generated": { "line": 61, "column": 11 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 49, "column": 11 }
                },
                {
                    "generated": { "line": 61, "column": 12 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 49, "column": 4 }
                },
                {
                    "generated": { "line": 62, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 50, "column": 3 }
                },
                {
                    "generated": { "line": 64, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 51, "column": 2 }
                },
                {
                    "name": "acc",
                    "generated": { "line": 64, "column": 9 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 51, "column": 9 }
                },
                {
                    "generated": { "line": 64, "column": 12 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 51, "column": 2 }
                },
                {
                    "generated": { "line": 65, "column": 0 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 52, "column": 1 }
                },
                {
                    "generated": { "line": 65, "column": 1 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 31 }
                },
                {
                    "generated": { "line": 65, "column": 2 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 45, "column": 0 }
                },
                {
                    "name": "reduceRight",
                    "generated": { "line": 66, "column": 15 },
                    "source": "../node_modules/ramda/es/reduceRight.js",
                    "original": { "line": 53, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/reduceRight.js": "import _curry3 from './internal/_curry3.js';\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nvar reduceRight = /*#__PURE__*/_curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n  return acc;\n});\nexport default reduceRight;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "2914544b6071270f83625a34b51e5c3b",
    "cacheData": { "env": {} }
}
