{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./internal/_curry2",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/equals.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./internal/_equals",
            "loc": { "line": 2, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/equals.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_equals.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2\"));\n\nvar _equals2 = _interopRequireDefault(require(\"./internal/_equals\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals =\n/*#__PURE__*/\n(0, _curry.default)(function equals(a, b) {\n  return (0, _equals2.default)(a, b, [], []);\n});\nvar _default = equals;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 0 }
                },
                {
                    "name": "equals",
                    "generated": { "line": 39, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "generated": { "line": 39, "column": 10 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 10 }
                },
                {
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 13 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 26 }
                },
                {
                    "generated": { "line": 41, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 34 }
                },
                {
                    "name": "equals",
                    "generated": { "line": 41, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 43 }
                },
                {
                    "generated": { "line": 41, "column": 35 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 34 }
                },
                {
                    "name": "a",
                    "generated": { "line": 41, "column": 36 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 50 }
                },
                {
                    "generated": { "line": 41, "column": 37 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 34 }
                },
                {
                    "name": "b",
                    "generated": { "line": 41, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 53 }
                },
                {
                    "generated": { "line": 41, "column": 40 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 34 }
                },
                {
                    "generated": { "line": 41, "column": 42 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 56 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 2 }
                },
                {
                    "generated": { "line": 42, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 9 }
                },
                {
                    "name": "a",
                    "generated": { "line": 42, "column": 31 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 17 }
                },
                {
                    "generated": { "line": 42, "column": 32 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 9 }
                },
                {
                    "name": "b",
                    "generated": { "line": 42, "column": 34 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 20 }
                },
                {
                    "generated": { "line": 42, "column": 35 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 9 }
                },
                {
                    "generated": { "line": 42, "column": 37 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 23 }
                },
                {
                    "generated": { "line": 42, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 9 }
                },
                {
                    "generated": { "line": 42, "column": 41 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 27 }
                },
                {
                    "generated": { "line": 42, "column": 43 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 9 }
                },
                {
                    "generated": { "line": 42, "column": 44 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 30, "column": 2 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 31, "column": 1 }
                },
                {
                    "generated": { "line": 43, "column": 1 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 26 }
                },
                {
                    "generated": { "line": 43, "column": 2 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 29, "column": 0 }
                },
                {
                    "name": "equals",
                    "generated": { "line": 44, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/equals.js",
                    "original": { "line": 32, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/equals.js": "import _curry2 from './internal/_curry2';\nimport _equals from './internal/_equals';\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = /*#__PURE__*/_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nexport default equals;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "365c273a2cc576ec84edf61c8645e403",
    "cacheData": { "env": {} }
}
