{
    "id": "../node_modules/ramda/es/composeWith.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry2.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/composeWith.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./pipeWith.js",
            "loc": { "line": 2, "column": 21 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/composeWith.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/pipeWith.js"
        },
        {
            "name": "./reverse.js",
            "loc": { "line": 3, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/composeWith.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/reverse.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _pipeWith = _interopRequireDefault(require(\"./pipeWith.js\"));\n\nvar _reverse = _interopRequireDefault(require(\"./reverse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Performs right-to-left function composition using transforming function. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @category Function\n * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.compose, R.pipeWith\n * @example\n *\n *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\n *\n *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\n *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined\n *\n * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, f(i, ...args)))\n */\nvar composeWith =\n/*#__PURE__*/\n(0, _curry.default)(function composeWith(xf, list) {\n  return _pipeWith.default.apply(this, [xf, (0, _reverse.default)(list)]);\n});\nvar _default = composeWith;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 16, "column": 0 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 5, "column": 0 }
                },
                {
                    "generated": { "line": 38, "column": 0 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "composeWith",
                    "generated": { "line": 38, "column": 4 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 4 }
                },
                {
                    "generated": { "line": 38, "column": 15 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 15 }
                },
                {
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 18 }
                },
                {
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 31 }
                },
                {
                    "generated": { "line": 40, "column": 20 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 39 }
                },
                {
                    "name": "composeWith",
                    "generated": { "line": 40, "column": 29 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 48 }
                },
                {
                    "generated": { "line": 40, "column": 40 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 39 }
                },
                {
                    "name": "xf",
                    "generated": { "line": 40, "column": 41 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 60 }
                },
                {
                    "generated": { "line": 40, "column": 43 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 39 }
                },
                {
                    "name": "list",
                    "generated": { "line": 40, "column": 45 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 64 }
                },
                {
                    "generated": { "line": 40, "column": 49 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 39 }
                },
                {
                    "generated": { "line": 40, "column": 51 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 70 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "name": "pipeWith",
                    "generated": { "line": 41, "column": 9 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 41, "column": 27 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 18 }
                },
                {
                    "generated": { "line": 41, "column": 32 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "generated": { "line": 41, "column": 33 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 24 }
                },
                {
                    "generated": { "line": 41, "column": 37 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "generated": { "line": 41, "column": 39 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 30 }
                },
                {
                    "name": "xf",
                    "generated": { "line": 41, "column": 40 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 31 }
                },
                {
                    "generated": { "line": 41, "column": 42 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 30 }
                },
                {
                    "generated": { "line": 41, "column": 44 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 35 }
                },
                {
                    "name": "list",
                    "generated": { "line": 41, "column": 66 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 43 }
                },
                {
                    "generated": { "line": 41, "column": 70 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 35 }
                },
                {
                    "generated": { "line": 41, "column": 71 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 30 }
                },
                {
                    "generated": { "line": 41, "column": 72 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "generated": { "line": 41, "column": 73 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 29, "column": 1 }
                },
                {
                    "generated": { "line": 42, "column": 1 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 31 }
                },
                {
                    "generated": { "line": 42, "column": 2 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "composeWith",
                    "generated": { "line": 43, "column": 15 },
                    "source": "../node_modules/ramda/es/composeWith.js",
                    "original": { "line": 30, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/composeWith.js": "import _curry2 from './internal/_curry2.js';\nimport pipeWith from './pipeWith.js';\nimport reverse from './reverse.js';\n\n/**\n * Performs right-to-left function composition using transforming function. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @category Function\n * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.compose, R.pipeWith\n * @example\n *\n *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\n *\n *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\n *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined\n *\n * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, f(i, ...args)))\n */\nvar composeWith = /*#__PURE__*/_curry2(function composeWith(xf, list) {\n  return pipeWith.apply(this, [xf, reverse(list)]);\n});\nexport default composeWith;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "43589ed95ae28d27bdb20d6453514e88",
    "cacheData": { "env": {} }
}
