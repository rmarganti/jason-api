{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./composeK",
            "loc": { "line": 1, "column": 21 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/composeK.js"
        },
        {
            "name": "./reverse",
            "loc": { "line": 2, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/reverse.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pipeK;\n\nvar _composeK = _interopRequireDefault(require(\"./composeK\"));\n\nvar _reverse = _interopRequireDefault(require(\"./reverse\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the left-to-right Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)\n * @param {...Function}\n * @return {Function}\n * @see R.composeK\n * @example\n *\n *      //  parseJson :: String -> Maybe *\n *      //  get :: String -> Object -> Maybe *\n *\n *      //  getStateCode :: Maybe String -> Maybe String\n *      var getStateCode = R.pipeK(\n *        parseJson,\n *        get('user'),\n *        get('address'),\n *        get('state'),\n *        R.compose(Maybe.of, R.toUpper)\n *      );\n *\n *      getStateCode('{\"user\":{\"address\":{\"state\":\"ny\"}}}');\n *      //=> Just('NY')\n *      getStateCode('[Invalid JSON]');\n *      //=> Nothing()\n * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))\n */\nfunction pipeK() {\n  if (arguments.length === 0) {\n    throw new Error('pipeK requires at least one argument');\n  }\n\n  return _composeK.default.apply(this, (0, _reverse.default)(arguments));\n}"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 48, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 38, "column": 15 }
                },
                {
                    "name": "pipeK",
                    "generated": { "line": 48, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 38, "column": 24 }
                },
                {
                    "generated": { "line": 48, "column": 14 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 38, "column": 15 }
                },
                {
                    "generated": { "line": 48, "column": 17 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 38, "column": 32 }
                },
                {
                    "generated": { "line": 49, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 39, "column": 2 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 49, "column": 6 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 39, "column": 6 }
                },
                {
                    "generated": { "line": 49, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 39, "column": 15 }
                },
                {
                    "name": "length",
                    "generated": { "line": 49, "column": 16 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 39, "column": 16 }
                },
                {
                    "generated": { "line": 49, "column": 22 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 39, "column": 6 }
                },
                {
                    "generated": { "line": 49, "column": 27 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 39, "column": 27 }
                },
                {
                    "generated": { "line": 49, "column": 28 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 39, "column": 2 }
                },
                {
                    "generated": { "line": 49, "column": 30 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 39, "column": 30 }
                },
                {
                    "generated": { "line": 50, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 40, "column": 4 }
                },
                {
                    "generated": { "line": 50, "column": 10 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 40, "column": 10 }
                },
                {
                    "name": "Error",
                    "generated": { "line": 50, "column": 14 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 40, "column": 14 }
                },
                {
                    "generated": { "line": 50, "column": 19 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 40, "column": 10 }
                },
                {
                    "generated": { "line": 50, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 40, "column": 20 }
                },
                {
                    "generated": { "line": 50, "column": 58 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 40, "column": 10 }
                },
                {
                    "generated": { "line": 50, "column": 59 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 40, "column": 4 }
                },
                {
                    "generated": { "line": 51, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 41, "column": 3 }
                },
                {
                    "generated": { "line": 53, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 2 }
                },
                {
                    "name": "composeK",
                    "generated": { "line": 53, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 9 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 53, "column": 27 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 18 }
                },
                {
                    "generated": { "line": 53, "column": 32 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 9 }
                },
                {
                    "generated": { "line": 53, "column": 33 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 24 }
                },
                {
                    "generated": { "line": 53, "column": 37 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 9 }
                },
                {
                    "generated": { "line": 53, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 30 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 53, "column": 61 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 38 }
                },
                {
                    "generated": { "line": 53, "column": 70 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 30 }
                },
                {
                    "generated": { "line": 53, "column": 71 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 9 }
                },
                {
                    "generated": { "line": 53, "column": 72 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 42, "column": 2 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js",
                    "original": { "line": 43, "column": 1 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/pipeK.js": "import composeK from './composeK';\nimport reverse from './reverse';\n\n/**\n * Returns the left-to-right Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)\n * @param {...Function}\n * @return {Function}\n * @see R.composeK\n * @example\n *\n *      //  parseJson :: String -> Maybe *\n *      //  get :: String -> Object -> Maybe *\n *\n *      //  getStateCode :: Maybe String -> Maybe String\n *      var getStateCode = R.pipeK(\n *        parseJson,\n *        get('user'),\n *        get('address'),\n *        get('state'),\n *        R.compose(Maybe.of, R.toUpper)\n *      );\n *\n *      getStateCode('{\"user\":{\"address\":{\"state\":\"ny\"}}}');\n *      //=> Just('NY')\n *      getStateCode('[Invalid JSON]');\n *      //=> Nothing()\n * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))\n */\nexport default function pipeK() {\n  if (arguments.length === 0) {\n    throw new Error('pipeK requires at least one argument');\n  }\n  return composeK.apply(this, reverse(arguments));\n}"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "be5cf1bf4671f66623c02240fbad524d",
    "cacheData": { "env": {} }
}
