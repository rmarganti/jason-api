{
    "id": "../node_modules/ramda/es/either.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry2.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/either.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./internal/_isFunction.js",
            "loc": { "line": 2, "column": 24 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/either.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_isFunction.js"
        },
        {
            "name": "./lift.js",
            "loc": { "line": 3, "column": 17 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/either.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/lift.js"
        },
        {
            "name": "./or.js",
            "loc": { "line": 4, "column": 15 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/either.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/or.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _isFunction2 = _interopRequireDefault(require(\"./internal/_isFunction.js\"));\n\nvar _lift = _interopRequireDefault(require(\"./lift.js\"));\n\nvar _or = _interopRequireDefault(require(\"./or.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.or\n * @example\n *\n *      const gt10 = x => x > 10;\n *      const even = x => x % 2 === 0;\n *      const f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n *\n *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)\n *      R.either([false, false, 'a'], [11]) // => [11, 11, \"a\"]\n */\nvar either =\n/*#__PURE__*/\n(0, _curry.default)(function either(f, g) {\n  return (0, _isFunction2.default)(f) ? function _either() {\n    return f.apply(this, arguments) || g.apply(this, arguments);\n  } : (0, _lift.default)(_or.default)(f, g);\n});\nvar _default = either;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 18, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 6, "column": 0 }
                },
                {
                    "generated": { "line": 48, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 0 }
                },
                {
                    "name": "either",
                    "generated": { "line": 48, "column": 4 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 4 }
                },
                {
                    "generated": { "line": 48, "column": 10 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 10 }
                },
                {
                    "generated": { "line": 49, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 13 }
                },
                {
                    "generated": { "line": 50, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 26 }
                },
                {
                    "generated": { "line": 50, "column": 20 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 34 }
                },
                {
                    "name": "either",
                    "generated": { "line": 50, "column": 29 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 43 }
                },
                {
                    "generated": { "line": 50, "column": 35 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 34 }
                },
                {
                    "name": "f",
                    "generated": { "line": 50, "column": 36 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 50 }
                },
                {
                    "generated": { "line": 50, "column": 37 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 34 }
                },
                {
                    "name": "g",
                    "generated": { "line": 50, "column": 39 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 53 }
                },
                {
                    "generated": { "line": 50, "column": 40 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 34 }
                },
                {
                    "generated": { "line": 50, "column": 42 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 56 }
                },
                {
                    "generated": { "line": 51, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 2 }
                },
                {
                    "generated": { "line": 51, "column": 9 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 9 }
                },
                {
                    "name": "f",
                    "generated": { "line": 51, "column": 35 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 21 }
                },
                {
                    "generated": { "line": 51, "column": 36 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 9 }
                },
                {
                    "generated": { "line": 51, "column": 40 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 26 }
                },
                {
                    "name": "_either",
                    "generated": { "line": 51, "column": 49 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 35 }
                },
                {
                    "generated": { "line": 51, "column": 56 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 26 }
                },
                {
                    "generated": { "line": 51, "column": 59 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 45 }
                },
                {
                    "generated": { "line": 52, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 4 }
                },
                {
                    "name": "f",
                    "generated": { "line": 52, "column": 11 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 11 }
                },
                {
                    "generated": { "line": 52, "column": 12 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 12 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 52, "column": 13 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 13 }
                },
                {
                    "generated": { "line": 52, "column": 18 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 11 }
                },
                {
                    "generated": { "line": 52, "column": 19 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 19 }
                },
                {
                    "generated": { "line": 52, "column": 23 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 11 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 52, "column": 25 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 25 }
                },
                {
                    "generated": { "line": 52, "column": 34 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 11 }
                },
                {
                    "name": "g",
                    "generated": { "line": 52, "column": 39 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 39 }
                },
                {
                    "generated": { "line": 52, "column": 40 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 40 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 52, "column": 41 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 41 }
                },
                {
                    "generated": { "line": 52, "column": 46 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 39 }
                },
                {
                    "generated": { "line": 52, "column": 47 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 47 }
                },
                {
                    "generated": { "line": 52, "column": 51 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 39 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 52, "column": 53 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 53 }
                },
                {
                    "generated": { "line": 52, "column": 62 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 39 }
                },
                {
                    "generated": { "line": 52, "column": 63 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 38, "column": 4 }
                },
                {
                    "generated": { "line": 53, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 39, "column": 3 }
                },
                {
                    "generated": { "line": 53, "column": 3 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 9 }
                },
                {
                    "generated": { "line": 53, "column": 6 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 39, "column": 6 }
                },
                {
                    "name": "or",
                    "generated": { "line": 53, "column": 25 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 39, "column": 11 }
                },
                {
                    "generated": { "line": 53, "column": 36 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 39, "column": 6 }
                },
                {
                    "name": "f",
                    "generated": { "line": 53, "column": 38 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 39, "column": 15 }
                },
                {
                    "generated": { "line": 53, "column": 39 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 39, "column": 6 }
                },
                {
                    "name": "g",
                    "generated": { "line": 53, "column": 41 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 39, "column": 18 }
                },
                {
                    "generated": { "line": 53, "column": 42 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 39, "column": 6 }
                },
                {
                    "generated": { "line": 53, "column": 43 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 37, "column": 2 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 40, "column": 1 }
                },
                {
                    "generated": { "line": 54, "column": 1 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 26 }
                },
                {
                    "generated": { "line": 54, "column": 2 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 36, "column": 0 }
                },
                {
                    "name": "either",
                    "generated": { "line": 55, "column": 15 },
                    "source": "../node_modules/ramda/es/either.js",
                    "original": { "line": 41, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/either.js": "import _curry2 from './internal/_curry2.js';\nimport _isFunction from './internal/_isFunction.js';\nimport lift from './lift.js';\nimport or from './or.js';\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.or\n * @example\n *\n *      const gt10 = x => x > 10;\n *      const even = x => x % 2 === 0;\n *      const f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n *\n *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)\n *      R.either([false, false, 'a'], [11]) // => [11, 11, \"a\"]\n */\nvar either = /*#__PURE__*/_curry2(function either(f, g) {\n  return _isFunction(f) ? function _either() {\n    return f.apply(this, arguments) || g.apply(this, arguments);\n  } : lift(or)(f, g);\n});\nexport default either;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "0f5db25b658b618d4140fe01081c4fb1",
    "cacheData": { "env": {} }
}
