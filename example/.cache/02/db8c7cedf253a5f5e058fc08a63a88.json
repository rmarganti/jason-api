{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./internal/_curry2",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_curry2.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nvar splitWhen =\n/*#__PURE__*/\n(0, _curry.default)(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\nvar _default = splitWhen;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 31, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 0 }
                },
                {
                    "name": "splitWhen",
                    "generated": { "line": 31, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 4 }
                },
                {
                    "generated": { "line": 31, "column": 13 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 13 }
                },
                {
                    "generated": { "line": 32, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 16 }
                },
                {
                    "generated": { "line": 33, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 29 }
                },
                {
                    "generated": { "line": 33, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 37 }
                },
                {
                    "name": "splitWhen",
                    "generated": { "line": 33, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 46 }
                },
                {
                    "generated": { "line": 33, "column": 38 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 37 }
                },
                {
                    "name": "pred",
                    "generated": { "line": 33, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 56 }
                },
                {
                    "generated": { "line": 33, "column": 43 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 37 }
                },
                {
                    "name": "list",
                    "generated": { "line": 33, "column": 45 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 62 }
                },
                {
                    "generated": { "line": 33, "column": 49 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 37 }
                },
                {
                    "generated": { "line": 33, "column": 51 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 68 }
                },
                {
                    "generated": { "line": 34, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 23, "column": 2 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 34, "column": 6 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 23, "column": 6 }
                },
                {
                    "generated": { "line": 34, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 23, "column": 9 }
                },
                {
                    "generated": { "line": 34, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 23, "column": 12 }
                },
                {
                    "generated": { "line": 34, "column": 13 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 23, "column": 2 }
                },
                {
                    "generated": { "line": 35, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 24, "column": 2 }
                },
                {
                    "name": "len",
                    "generated": { "line": 35, "column": 6 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 24, "column": 6 }
                },
                {
                    "generated": { "line": 35, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 24, "column": 9 }
                },
                {
                    "name": "list",
                    "generated": { "line": 35, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 24, "column": 12 }
                },
                {
                    "generated": { "line": 35, "column": 16 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 24, "column": 16 }
                },
                {
                    "name": "length",
                    "generated": { "line": 35, "column": 17 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 24, "column": 17 }
                },
                {
                    "generated": { "line": 35, "column": 23 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 24, "column": 2 }
                },
                {
                    "generated": { "line": 36, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 25, "column": 2 }
                },
                {
                    "name": "prefix",
                    "generated": { "line": 36, "column": 6 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 25, "column": 6 }
                },
                {
                    "generated": { "line": 36, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 25, "column": 12 }
                },
                {
                    "generated": { "line": 36, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 25, "column": 15 }
                },
                {
                    "generated": { "line": 36, "column": 17 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 25, "column": 2 }
                },
                {
                    "generated": { "line": 38, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 2 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 38, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 9 }
                },
                {
                    "generated": { "line": 38, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 12 }
                },
                {
                    "name": "len",
                    "generated": { "line": 38, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 15 }
                },
                {
                    "generated": { "line": 38, "column": 18 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 9 }
                },
                {
                    "generated": { "line": 38, "column": 22 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 22 }
                },
                {
                    "name": "pred",
                    "generated": { "line": 38, "column": 23 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 23 }
                },
                {
                    "generated": { "line": 38, "column": 27 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 27 }
                },
                {
                    "name": "list",
                    "generated": { "line": 38, "column": 28 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 28 }
                },
                {
                    "generated": { "line": 38, "column": 32 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 32 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 38, "column": 33 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 33 }
                },
                {
                    "generated": { "line": 38, "column": 36 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 32 }
                },
                {
                    "generated": { "line": 38, "column": 37 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 27 }
                },
                {
                    "generated": { "line": 38, "column": 38 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 2 }
                },
                {
                    "generated": { "line": 38, "column": 40 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 27, "column": 40 }
                },
                {
                    "name": "prefix",
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 4 }
                },
                {
                    "name": "prefix",
                    "generated": { "line": 39, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 4 }
                },
                {
                    "generated": { "line": 39, "column": 10 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 10 }
                },
                {
                    "name": "push",
                    "generated": { "line": 39, "column": 11 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 11 }
                },
                {
                    "generated": { "line": 39, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 4 }
                },
                {
                    "name": "list",
                    "generated": { "line": 39, "column": 16 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 16 }
                },
                {
                    "generated": { "line": 39, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 20 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 39, "column": 21 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 21 }
                },
                {
                    "generated": { "line": 39, "column": 24 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 20 }
                },
                {
                    "generated": { "line": 39, "column": 25 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 28, "column": 4 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 40, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "generated": { "line": 40, "column": 7 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 29, "column": 7 }
                },
                {
                    "generated": { "line": 40, "column": 11 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 29, "column": 11 }
                },
                {
                    "generated": { "line": 40, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 30, "column": 3 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 2 }
                },
                {
                    "generated": { "line": 43, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 9 }
                },
                {
                    "name": "prefix",
                    "generated": { "line": 43, "column": 10 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 10 }
                },
                {
                    "generated": { "line": 43, "column": 16 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 9 }
                },
                {
                    "name": "Array",
                    "generated": { "line": 43, "column": 18 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 18 }
                },
                {
                    "generated": { "line": 43, "column": 23 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 23 }
                },
                {
                    "name": "prototype",
                    "generated": { "line": 43, "column": 24 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 24 }
                },
                {
                    "generated": { "line": 43, "column": 33 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 18 }
                },
                {
                    "name": "slice",
                    "generated": { "line": 43, "column": 34 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 34 }
                },
                {
                    "generated": { "line": 43, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 18 }
                },
                {
                    "name": "call",
                    "generated": { "line": 43, "column": 40 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 40 }
                },
                {
                    "generated": { "line": 43, "column": 44 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 18 }
                },
                {
                    "name": "list",
                    "generated": { "line": 43, "column": 45 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 45 }
                },
                {
                    "generated": { "line": 43, "column": 49 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 18 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 43, "column": 51 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 51 }
                },
                {
                    "generated": { "line": 43, "column": 54 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 18 }
                },
                {
                    "generated": { "line": 43, "column": 55 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 9 }
                },
                {
                    "generated": { "line": 43, "column": 56 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 32, "column": 2 }
                },
                {
                    "generated": { "line": 44, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 33, "column": 1 }
                },
                {
                    "generated": { "line": 44, "column": 1 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 29 }
                },
                {
                    "generated": { "line": 44, "column": 2 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 22, "column": 0 }
                },
                {
                    "name": "splitWhen",
                    "generated": { "line": 45, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js",
                    "original": { "line": 34, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/splitWhen.js": "import _curry2 from './internal/_curry2';\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nvar splitWhen = /*#__PURE__*/_curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\nexport default splitWhen;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "ee19c4f5ef2f86a04938691e514370fa",
    "cacheData": { "env": {} }
}
