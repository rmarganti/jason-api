{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./internal/_checkForMethod",
            "loc": { "line": 1, "column": 28 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_checkForMethod.js"
        },
        {
            "name": "./internal/_curry2",
            "loc": { "line": 2, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_curry2.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _checkForMethod2 = _interopRequireDefault(require(\"./internal/_checkForMethod\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach =\n/*#__PURE__*/\n(0, _curry.default)(\n/*#__PURE__*/\n(0, _checkForMethod2.default)('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n\n  return list;\n}));\nvar _default = forEach;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 48, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 0 }
                },
                {
                    "name": "forEach",
                    "generated": { "line": 48, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 4 }
                },
                {
                    "generated": { "line": 48, "column": 11 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 11 }
                },
                {
                    "generated": { "line": 49, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 14 }
                },
                {
                    "generated": { "line": 50, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 27 }
                },
                {
                    "generated": { "line": 51, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 36 }
                },
                {
                    "generated": { "line": 52, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 49 }
                },
                {
                    "generated": { "line": 52, "column": 30 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 65 }
                },
                {
                    "generated": { "line": 52, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 49 }
                },
                {
                    "generated": { "line": 52, "column": 41 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 76 }
                },
                {
                    "name": "forEach",
                    "generated": { "line": 52, "column": 50 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 85 }
                },
                {
                    "generated": { "line": 52, "column": 57 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 76 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 52, "column": 58 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 93 }
                },
                {
                    "generated": { "line": 52, "column": 60 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 76 }
                },
                {
                    "name": "list",
                    "generated": { "line": 52, "column": 62 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 97 }
                },
                {
                    "generated": { "line": 52, "column": 66 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 76 }
                },
                {
                    "generated": { "line": 52, "column": 68 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 103 }
                },
                {
                    "generated": { "line": 53, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 39, "column": 2 }
                },
                {
                    "name": "len",
                    "generated": { "line": 53, "column": 6 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 39, "column": 6 }
                },
                {
                    "generated": { "line": 53, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 39, "column": 9 }
                },
                {
                    "name": "list",
                    "generated": { "line": 53, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 39, "column": 12 }
                },
                {
                    "generated": { "line": 53, "column": 16 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 39, "column": 16 }
                },
                {
                    "name": "length",
                    "generated": { "line": 53, "column": 17 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 39, "column": 17 }
                },
                {
                    "generated": { "line": 53, "column": 23 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 39, "column": 2 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 40, "column": 2 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 54, "column": 6 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 40, "column": 6 }
                },
                {
                    "generated": { "line": 54, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 40, "column": 9 }
                },
                {
                    "generated": { "line": 54, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 40, "column": 12 }
                },
                {
                    "generated": { "line": 54, "column": 13 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 40, "column": 2 }
                },
                {
                    "generated": { "line": 56, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 41, "column": 2 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 56, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 41, "column": 9 }
                },
                {
                    "generated": { "line": 56, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 41, "column": 12 }
                },
                {
                    "name": "len",
                    "generated": { "line": 56, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 41, "column": 15 }
                },
                {
                    "generated": { "line": 56, "column": 18 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 41, "column": 2 }
                },
                {
                    "generated": { "line": 56, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 41, "column": 20 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 57, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 42, "column": 4 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 57, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 42, "column": 4 }
                },
                {
                    "generated": { "line": 57, "column": 6 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 42, "column": 6 }
                },
                {
                    "name": "list",
                    "generated": { "line": 57, "column": 7 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 42, "column": 7 }
                },
                {
                    "generated": { "line": 57, "column": 11 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 42, "column": 11 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 57, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 42, "column": 12 }
                },
                {
                    "generated": { "line": 57, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 42, "column": 11 }
                },
                {
                    "generated": { "line": 57, "column": 16 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 42, "column": 6 }
                },
                {
                    "generated": { "line": 57, "column": 17 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 42, "column": 4 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 58, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 43, "column": 4 }
                },
                {
                    "name": "idx",
                    "generated": { "line": 58, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 43, "column": 4 }
                },
                {
                    "generated": { "line": 58, "column": 7 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 43, "column": 7 }
                },
                {
                    "generated": { "line": 58, "column": 11 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 43, "column": 11 }
                },
                {
                    "generated": { "line": 58, "column": 12 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 43, "column": 4 }
                },
                {
                    "generated": { "line": 59, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 44, "column": 3 }
                },
                {
                    "generated": { "line": 61, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 45, "column": 2 }
                },
                {
                    "name": "list",
                    "generated": { "line": 61, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 45, "column": 9 }
                },
                {
                    "generated": { "line": 61, "column": 13 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 45, "column": 2 }
                },
                {
                    "generated": { "line": 62, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 46, "column": 1 }
                },
                {
                    "generated": { "line": 62, "column": 1 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 49 }
                },
                {
                    "generated": { "line": 62, "column": 2 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 27 }
                },
                {
                    "generated": { "line": 62, "column": 3 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 38, "column": 0 }
                },
                {
                    "name": "forEach",
                    "generated": { "line": 63, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js",
                    "original": { "line": 47, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/forEach.js": "import _checkForMethod from './internal/_checkForMethod';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\nexport default forEach;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "4c1c5717e16681d3b774ccad78673ff7",
    "cacheData": { "env": {} }
}
