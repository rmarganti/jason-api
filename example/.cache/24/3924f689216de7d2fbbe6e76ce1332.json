{
    "id": "../node_modules/ramda/es/whereEq.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry2.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/whereEq.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./equals.js",
            "loc": { "line": 2, "column": 19 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/whereEq.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/equals.js"
        },
        {
            "name": "./map.js",
            "loc": { "line": 3, "column": 16 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/whereEq.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/map.js"
        },
        {
            "name": "./where.js",
            "loc": { "line": 4, "column": 18 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/whereEq.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/where.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _equals = _interopRequireDefault(require(\"./equals.js\"));\n\nvar _map = _interopRequireDefault(require(\"./map.js\"));\n\nvar _where = _interopRequireDefault(require(\"./where.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\n * spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propEq, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */\nvar whereEq =\n/*#__PURE__*/\n(0, _curry.default)(function whereEq(spec, testObj) {\n  return (0, _where.default)((0, _map.default)(_equals.default, spec), testObj);\n});\nvar _default = whereEq;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 18, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 6, "column": 0 }
                },
                {
                    "generated": { "line": 46, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 0 }
                },
                {
                    "name": "whereEq",
                    "generated": { "line": 46, "column": 4 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 4 }
                },
                {
                    "generated": { "line": 46, "column": 11 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 11 }
                },
                {
                    "generated": { "line": 47, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 14 }
                },
                {
                    "generated": { "line": 48, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 27 }
                },
                {
                    "generated": { "line": 48, "column": 20 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 35 }
                },
                {
                    "name": "whereEq",
                    "generated": { "line": 48, "column": 29 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 44 }
                },
                {
                    "generated": { "line": 48, "column": 36 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 35 }
                },
                {
                    "name": "spec",
                    "generated": { "line": 48, "column": 37 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 52 }
                },
                {
                    "generated": { "line": 48, "column": 41 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 35 }
                },
                {
                    "name": "testObj",
                    "generated": { "line": 48, "column": 43 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 58 }
                },
                {
                    "generated": { "line": 48, "column": 50 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 35 }
                },
                {
                    "generated": { "line": 48, "column": 52 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 67 }
                },
                {
                    "generated": { "line": 49, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 2 }
                },
                {
                    "generated": { "line": 49, "column": 9 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 9 }
                },
                {
                    "generated": { "line": 49, "column": 29 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 15 }
                },
                {
                    "name": "equals",
                    "generated": { "line": 49, "column": 47 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 19 }
                },
                {
                    "generated": { "line": 49, "column": 62 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 15 }
                },
                {
                    "name": "spec",
                    "generated": { "line": 49, "column": 64 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 27 }
                },
                {
                    "generated": { "line": 49, "column": 68 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 15 }
                },
                {
                    "generated": { "line": 49, "column": 69 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 9 }
                },
                {
                    "name": "testObj",
                    "generated": { "line": 49, "column": 71 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 34 }
                },
                {
                    "generated": { "line": 49, "column": 78 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 9 }
                },
                {
                    "generated": { "line": 49, "column": 79 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 35, "column": 2 }
                },
                {
                    "generated": { "line": 50, "column": 0 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 36, "column": 1 }
                },
                {
                    "generated": { "line": 50, "column": 1 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 27 }
                },
                {
                    "generated": { "line": 50, "column": 2 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 34, "column": 0 }
                },
                {
                    "name": "whereEq",
                    "generated": { "line": 51, "column": 15 },
                    "source": "../node_modules/ramda/es/whereEq.js",
                    "original": { "line": 37, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/whereEq.js": "import _curry2 from './internal/_curry2.js';\nimport equals from './equals.js';\nimport map from './map.js';\nimport where from './where.js';\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\n * spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propEq, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */\nvar whereEq = /*#__PURE__*/_curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\nexport default whereEq;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "bc664d5e595cf09d0972bc45b50acb49",
    "cacheData": { "env": {} }
}
