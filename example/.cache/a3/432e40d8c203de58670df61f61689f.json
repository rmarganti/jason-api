{
    "id": "../node_modules/ramda/es/juxt.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry1.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/juxt.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry1.js"
        },
        {
            "name": "./converge.js",
            "loc": { "line": 2, "column": 21 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/juxt.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/converge.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\n\nvar _converge = _interopRequireDefault(require(\"./converge.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      const getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nvar juxt =\n/*#__PURE__*/\n(0, _curry.default)(function juxt(fns) {\n  return (0, _converge.default)(function () {\n    return Array.prototype.slice.call(arguments, 0);\n  }, fns);\n});\nvar _default = juxt;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 31, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 0 }
                },
                {
                    "name": "juxt",
                    "generated": { "line": 31, "column": 4 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 4 }
                },
                {
                    "generated": { "line": 31, "column": 8 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 8 }
                },
                {
                    "generated": { "line": 32, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 11 }
                },
                {
                    "generated": { "line": 33, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 24 }
                },
                {
                    "generated": { "line": 33, "column": 20 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 32 }
                },
                {
                    "name": "juxt",
                    "generated": { "line": 33, "column": 29 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 41 }
                },
                {
                    "generated": { "line": 33, "column": 33 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 32 }
                },
                {
                    "name": "fns",
                    "generated": { "line": 33, "column": 34 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 46 }
                },
                {
                    "generated": { "line": 33, "column": 37 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 32 }
                },
                {
                    "generated": { "line": 33, "column": 39 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 51 }
                },
                {
                    "generated": { "line": 34, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 22, "column": 2 }
                },
                {
                    "generated": { "line": 34, "column": 9 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 22, "column": 9 }
                },
                {
                    "generated": { "line": 34, "column": 32 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 22, "column": 18 }
                },
                {
                    "generated": { "line": 34, "column": 44 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 22, "column": 30 }
                },
                {
                    "generated": { "line": 35, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 4 }
                },
                {
                    "name": "Array",
                    "generated": { "line": 35, "column": 11 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 11 }
                },
                {
                    "generated": { "line": 35, "column": 16 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 16 }
                },
                {
                    "name": "prototype",
                    "generated": { "line": 35, "column": 17 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 17 }
                },
                {
                    "generated": { "line": 35, "column": 26 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 11 }
                },
                {
                    "name": "slice",
                    "generated": { "line": 35, "column": 27 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 27 }
                },
                {
                    "generated": { "line": 35, "column": 32 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 11 }
                },
                {
                    "name": "call",
                    "generated": { "line": 35, "column": 33 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 33 }
                },
                {
                    "generated": { "line": 35, "column": 37 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 11 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 35, "column": 38 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 38 }
                },
                {
                    "generated": { "line": 35, "column": 47 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 11 }
                },
                {
                    "generated": { "line": 35, "column": 49 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 49 }
                },
                {
                    "generated": { "line": 35, "column": 50 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 11 }
                },
                {
                    "generated": { "line": 35, "column": 51 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 23, "column": 4 }
                },
                {
                    "generated": { "line": 36, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 24, "column": 3 }
                },
                {
                    "generated": { "line": 36, "column": 3 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 22, "column": 9 }
                },
                {
                    "name": "fns",
                    "generated": { "line": 36, "column": 5 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 24, "column": 5 }
                },
                {
                    "generated": { "line": 36, "column": 8 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 22, "column": 9 }
                },
                {
                    "generated": { "line": 36, "column": 9 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 22, "column": 2 }
                },
                {
                    "generated": { "line": 37, "column": 0 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 25, "column": 1 }
                },
                {
                    "generated": { "line": 37, "column": 1 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 24 }
                },
                {
                    "generated": { "line": 37, "column": 2 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 21, "column": 0 }
                },
                {
                    "name": "juxt",
                    "generated": { "line": 38, "column": 15 },
                    "source": "../node_modules/ramda/es/juxt.js",
                    "original": { "line": 26, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/juxt.js": "import _curry1 from './internal/_curry1.js';\nimport converge from './converge.js';\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      const getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nvar juxt = /*#__PURE__*/_curry1(function juxt(fns) {\n  return converge(function () {\n    return Array.prototype.slice.call(arguments, 0);\n  }, fns);\n});\nexport default juxt;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "600303fe9d8f789b2ca4682955598c9d",
    "cacheData": { "env": {} }
}
