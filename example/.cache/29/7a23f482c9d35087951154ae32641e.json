{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./pipeP",
            "loc": { "line": 1, "column": 18 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/pipeP.js"
        },
        {
            "name": "./reverse",
            "loc": { "line": 2, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/reverse.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = composeP;\n\nvar _pipeP = _interopRequireDefault(require(\"./pipeP\"));\n\nvar _reverse = _interopRequireDefault(require(\"./reverse\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nfunction composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n\n  return _pipeP.default.apply(this, (0, _reverse.default)(arguments));\n}"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 48, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 38, "column": 15 }
                },
                {
                    "name": "composeP",
                    "generated": { "line": 48, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 38, "column": 24 }
                },
                {
                    "generated": { "line": 48, "column": 17 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 38, "column": 15 }
                },
                {
                    "generated": { "line": 48, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 38, "column": 35 }
                },
                {
                    "generated": { "line": 49, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 39, "column": 2 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 49, "column": 6 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 39, "column": 6 }
                },
                {
                    "generated": { "line": 49, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 39, "column": 15 }
                },
                {
                    "name": "length",
                    "generated": { "line": 49, "column": 16 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 39, "column": 16 }
                },
                {
                    "generated": { "line": 49, "column": 22 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 39, "column": 6 }
                },
                {
                    "generated": { "line": 49, "column": 27 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 39, "column": 27 }
                },
                {
                    "generated": { "line": 49, "column": 28 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 39, "column": 2 }
                },
                {
                    "generated": { "line": 49, "column": 30 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 39, "column": 30 }
                },
                {
                    "generated": { "line": 50, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 40, "column": 4 }
                },
                {
                    "generated": { "line": 50, "column": 10 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 40, "column": 10 }
                },
                {
                    "name": "Error",
                    "generated": { "line": 50, "column": 14 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 40, "column": 14 }
                },
                {
                    "generated": { "line": 50, "column": 19 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 40, "column": 10 }
                },
                {
                    "generated": { "line": 50, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 40, "column": 20 }
                },
                {
                    "generated": { "line": 50, "column": 61 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 40, "column": 10 }
                },
                {
                    "generated": { "line": 50, "column": 62 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 40, "column": 4 }
                },
                {
                    "generated": { "line": 51, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 41, "column": 3 }
                },
                {
                    "generated": { "line": 53, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 2 }
                },
                {
                    "name": "pipeP",
                    "generated": { "line": 53, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 9 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 53, "column": 24 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 15 }
                },
                {
                    "generated": { "line": 53, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 9 }
                },
                {
                    "generated": { "line": 53, "column": 30 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 21 }
                },
                {
                    "generated": { "line": 53, "column": 34 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 9 }
                },
                {
                    "generated": { "line": 53, "column": 36 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 27 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 53, "column": 58 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 35 }
                },
                {
                    "generated": { "line": 53, "column": 67 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 27 }
                },
                {
                    "generated": { "line": 53, "column": 68 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 9 }
                },
                {
                    "generated": { "line": 53, "column": 69 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 42, "column": 2 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js",
                    "original": { "line": 43, "column": 1 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/composeP.js": "import pipeP from './pipeP';\nimport reverse from './reverse';\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nexport default function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return pipeP.apply(this, reverse(arguments));\n}"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "5f688b197438adabeab5a02aaaf83071",
    "cacheData": { "env": {} }
}
