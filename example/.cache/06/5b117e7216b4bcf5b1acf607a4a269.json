{
    "id": "../node_modules/ramda/es/toString.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry1.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/toString.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry1.js"
        },
        {
            "name": "./internal/_toString.js",
            "loc": { "line": 2, "column": 22 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/toString.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_toString.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\n\nvar _toString2 = _interopRequireDefault(require(\"./internal/_toString.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString =\n/*#__PURE__*/\n(0, _curry.default)(function toString(val) {\n  return (0, _toString2.default)(val, []);\n});\nvar _default = toString;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 50, "column": 0 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 0 }
                },
                {
                    "name": "toString",
                    "generated": { "line": 50, "column": 4 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 4 }
                },
                {
                    "generated": { "line": 50, "column": 12 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 12 }
                },
                {
                    "generated": { "line": 51, "column": 0 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 15 }
                },
                {
                    "generated": { "line": 52, "column": 0 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 28 }
                },
                {
                    "generated": { "line": 52, "column": 20 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 36 }
                },
                {
                    "name": "toString",
                    "generated": { "line": 52, "column": 29 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 45 }
                },
                {
                    "generated": { "line": 52, "column": 37 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 36 }
                },
                {
                    "name": "val",
                    "generated": { "line": 52, "column": 38 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 54 }
                },
                {
                    "generated": { "line": 52, "column": 41 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 36 }
                },
                {
                    "generated": { "line": 52, "column": 43 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 59 }
                },
                {
                    "generated": { "line": 53, "column": 0 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 41, "column": 2 }
                },
                {
                    "generated": { "line": 53, "column": 9 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 41, "column": 9 }
                },
                {
                    "name": "val",
                    "generated": { "line": 53, "column": 33 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 41, "column": 19 }
                },
                {
                    "generated": { "line": 53, "column": 36 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 41, "column": 9 }
                },
                {
                    "generated": { "line": 53, "column": 38 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 41, "column": 24 }
                },
                {
                    "generated": { "line": 53, "column": 40 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 41, "column": 9 }
                },
                {
                    "generated": { "line": 53, "column": 41 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 41, "column": 2 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 42, "column": 1 }
                },
                {
                    "generated": { "line": 54, "column": 1 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 28 }
                },
                {
                    "generated": { "line": 54, "column": 2 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 40, "column": 0 }
                },
                {
                    "name": "toString",
                    "generated": { "line": 55, "column": 15 },
                    "source": "../node_modules/ramda/es/toString.js",
                    "original": { "line": 43, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/toString.js": "import _curry1 from './internal/_curry1.js';\nimport _toString from './internal/_toString.js';\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString = /*#__PURE__*/_curry1(function toString(val) {\n  return _toString(val, []);\n});\nexport default toString;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "f07a31a9ea3ad9f005226ad69c3c6f97",
    "cacheData": { "env": {} }
}
