{
    "id": "../node_modules/ramda/es/curry.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry1.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/curry.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry1.js"
        },
        {
            "name": "./curryN.js",
            "loc": { "line": 2, "column": 19 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/curry.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/curryN.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\n\nvar _curryN = _interopRequireDefault(require(\"./curryN.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curry =\n/*#__PURE__*/\n(0, _curry.default)(function curry(fn) {\n  return (0, _curryN.default)(fn.length, fn);\n});\nvar _default = curry;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 55, "column": 0 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 0 }
                },
                {
                    "name": "curry",
                    "generated": { "line": 55, "column": 4 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 4 }
                },
                {
                    "generated": { "line": 55, "column": 9 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 9 }
                },
                {
                    "generated": { "line": 56, "column": 0 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 12 }
                },
                {
                    "generated": { "line": 57, "column": 0 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 25 }
                },
                {
                    "generated": { "line": 57, "column": 20 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 33 }
                },
                {
                    "name": "curry",
                    "generated": { "line": 57, "column": 29 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 42 }
                },
                {
                    "generated": { "line": 57, "column": 34 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 33 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 57, "column": 35 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 48 }
                },
                {
                    "generated": { "line": 57, "column": 37 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 33 }
                },
                {
                    "generated": { "line": 57, "column": 39 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 52 }
                },
                {
                    "generated": { "line": 58, "column": 0 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 46, "column": 2 }
                },
                {
                    "generated": { "line": 58, "column": 9 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 46, "column": 9 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 58, "column": 30 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 46, "column": 16 }
                },
                {
                    "generated": { "line": 58, "column": 32 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 46, "column": 18 }
                },
                {
                    "name": "length",
                    "generated": { "line": 58, "column": 33 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 46, "column": 19 }
                },
                {
                    "generated": { "line": 58, "column": 39 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 46, "column": 9 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 58, "column": 41 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 46, "column": 27 }
                },
                {
                    "generated": { "line": 58, "column": 43 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 46, "column": 9 }
                },
                {
                    "generated": { "line": 58, "column": 44 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 46, "column": 2 }
                },
                {
                    "generated": { "line": 59, "column": 0 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 47, "column": 1 }
                },
                {
                    "generated": { "line": 59, "column": 1 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 25 }
                },
                {
                    "generated": { "line": 59, "column": 2 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 45, "column": 0 }
                },
                {
                    "name": "curry",
                    "generated": { "line": 60, "column": 15 },
                    "source": "../node_modules/ramda/es/curry.js",
                    "original": { "line": 48, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/curry.js": "import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "10e10e768dbddcb240cf676ade807328",
    "cacheData": { "env": {} }
}
