{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./internal/_containsWith",
            "loc": { "line": 1, "column": 26 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_containsWith.js"
        },
        {
            "name": "./internal/_curry3",
            "loc": { "line": 2, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_curry3.js"
        },
        {
            "name": "./internal/_filter",
            "loc": { "line": 3, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_filter.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _containsWith2 = _interopRequireDefault(require(\"./internal/_containsWith\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry3\"));\n\nvar _filter2 = _interopRequireDefault(require(\"./internal/_filter\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin =\n/*#__PURE__*/\n(0, _curry.default)(function innerJoin(pred, xs, ys) {\n  return (0, _filter2.default)(function (x) {\n    return (0, _containsWith2.default)(pred, x, ys);\n  }, xs);\n});\nvar _default = innerJoin;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 16, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 5, "column": 0 }
                },
                {
                    "generated": { "line": 51, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 0 }
                },
                {
                    "name": "innerJoin",
                    "generated": { "line": 51, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 4 }
                },
                {
                    "generated": { "line": 51, "column": 13 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 13 }
                },
                {
                    "generated": { "line": 52, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 16 }
                },
                {
                    "generated": { "line": 53, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 29 }
                },
                {
                    "generated": { "line": 53, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 37 }
                },
                {
                    "name": "innerJoin",
                    "generated": { "line": 53, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 46 }
                },
                {
                    "generated": { "line": 53, "column": 38 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 37 }
                },
                {
                    "name": "pred",
                    "generated": { "line": 53, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 56 }
                },
                {
                    "generated": { "line": 53, "column": 43 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 37 }
                },
                {
                    "name": "xs",
                    "generated": { "line": 53, "column": 45 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 62 }
                },
                {
                    "generated": { "line": 53, "column": 47 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 37 }
                },
                {
                    "name": "ys",
                    "generated": { "line": 53, "column": 49 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 66 }
                },
                {
                    "generated": { "line": 53, "column": 51 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 37 }
                },
                {
                    "generated": { "line": 53, "column": 53 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 70 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 41, "column": 2 }
                },
                {
                    "generated": { "line": 54, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 41, "column": 9 }
                },
                {
                    "generated": { "line": 54, "column": 31 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 41, "column": 17 }
                },
                {
                    "name": "x",
                    "generated": { "line": 54, "column": 41 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 41, "column": 27 }
                },
                {
                    "generated": { "line": 54, "column": 42 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 41, "column": 17 }
                },
                {
                    "generated": { "line": 54, "column": 44 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 41, "column": 30 }
                },
                {
                    "generated": { "line": 55, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 42, "column": 4 }
                },
                {
                    "generated": { "line": 55, "column": 11 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 42, "column": 11 }
                },
                {
                    "name": "pred",
                    "generated": { "line": 55, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 42, "column": 25 }
                },
                {
                    "generated": { "line": 55, "column": 43 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 42, "column": 11 }
                },
                {
                    "name": "x",
                    "generated": { "line": 55, "column": 45 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 42, "column": 31 }
                },
                {
                    "generated": { "line": 55, "column": 46 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 42, "column": 11 }
                },
                {
                    "name": "ys",
                    "generated": { "line": 55, "column": 48 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 42, "column": 34 }
                },
                {
                    "generated": { "line": 55, "column": 50 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 42, "column": 11 }
                },
                {
                    "generated": { "line": 55, "column": 51 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 42, "column": 4 }
                },
                {
                    "generated": { "line": 56, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 43, "column": 3 }
                },
                {
                    "generated": { "line": 56, "column": 3 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 41, "column": 9 }
                },
                {
                    "name": "xs",
                    "generated": { "line": 56, "column": 5 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 43, "column": 5 }
                },
                {
                    "generated": { "line": 56, "column": 7 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 41, "column": 9 }
                },
                {
                    "generated": { "line": 56, "column": 8 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 41, "column": 2 }
                },
                {
                    "generated": { "line": 57, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 44, "column": 1 }
                },
                {
                    "generated": { "line": 57, "column": 1 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 29 }
                },
                {
                    "generated": { "line": 57, "column": 2 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 40, "column": 0 }
                },
                {
                    "name": "innerJoin",
                    "generated": { "line": 58, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js",
                    "original": { "line": 45, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/innerJoin.js": "import _containsWith from './internal/_containsWith';\nimport _curry3 from './internal/_curry3';\nimport _filter from './internal/_filter';\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin = /*#__PURE__*/_curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function (x) {\n    return _containsWith(pred, x, ys);\n  }, xs);\n});\nexport default innerJoin;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "a6be7ef724a75edceccc37dbdbcda073",
    "cacheData": { "env": {} }
}
