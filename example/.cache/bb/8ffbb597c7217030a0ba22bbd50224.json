{
    "id": "../node_modules/ramda/es/unapply.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry1.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/unapply.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry1.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nvar unapply =\n/*#__PURE__*/\n(0, _curry.default)(function unapply(fn) {\n  return function () {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\nvar _default = unapply;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 36, "column": 0 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "unapply",
                    "generated": { "line": 36, "column": 4 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 4 }
                },
                {
                    "generated": { "line": 36, "column": 11 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 11 }
                },
                {
                    "generated": { "line": 37, "column": 0 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 14 }
                },
                {
                    "generated": { "line": 38, "column": 0 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 27 }
                },
                {
                    "generated": { "line": 38, "column": 20 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 35 }
                },
                {
                    "name": "unapply",
                    "generated": { "line": 38, "column": 29 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 44 }
                },
                {
                    "generated": { "line": 38, "column": 36 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 35 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 38, "column": 37 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 52 }
                },
                {
                    "generated": { "line": 38, "column": 39 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 35 }
                },
                {
                    "generated": { "line": 38, "column": 41 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 56 }
                },
                {
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "generated": { "line": 39, "column": 9 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "generated": { "line": 39, "column": 21 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 28, "column": 21 }
                },
                {
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 40, "column": 11 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 11 }
                },
                {
                    "generated": { "line": 40, "column": 13 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 13 }
                },
                {
                    "name": "Array",
                    "generated": { "line": 40, "column": 14 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 14 }
                },
                {
                    "generated": { "line": 40, "column": 19 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 19 }
                },
                {
                    "name": "prototype",
                    "generated": { "line": 40, "column": 20 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 20 }
                },
                {
                    "generated": { "line": 40, "column": 29 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 14 }
                },
                {
                    "name": "slice",
                    "generated": { "line": 40, "column": 30 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 30 }
                },
                {
                    "generated": { "line": 40, "column": 35 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 14 }
                },
                {
                    "name": "call",
                    "generated": { "line": 40, "column": 36 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 36 }
                },
                {
                    "generated": { "line": 40, "column": 40 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 14 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 40, "column": 41 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 41 }
                },
                {
                    "generated": { "line": 40, "column": 50 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 14 }
                },
                {
                    "generated": { "line": 40, "column": 52 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 52 }
                },
                {
                    "generated": { "line": 40, "column": 53 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 14 }
                },
                {
                    "generated": { "line": 40, "column": 54 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 13 }
                },
                {
                    "generated": { "line": 40, "column": 55 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 30, "column": 3 }
                },
                {
                    "generated": { "line": 41, "column": 3 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 31, "column": 1 }
                },
                {
                    "generated": { "line": 42, "column": 1 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 27 }
                },
                {
                    "generated": { "line": 42, "column": 2 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "unapply",
                    "generated": { "line": 43, "column": 15 },
                    "source": "../node_modules/ramda/es/unapply.js",
                    "original": { "line": 32, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/unapply.js": "import _curry1 from './internal/_curry1.js';\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nvar unapply = /*#__PURE__*/_curry1(function unapply(fn) {\n  return function () {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\nexport default unapply;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "d91a457517d6dd24b01491b4ebfb9176",
    "cacheData": { "env": {} }
}
