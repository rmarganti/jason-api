{
    "id": "../node_modules/ramda/es/countBy.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./reduceBy.js",
            "loc": { "line": 1, "column": 21 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/countBy.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/reduceBy.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _reduceBy = _interopRequireDefault(require(\"./reduceBy.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nvar countBy =\n/*#__PURE__*/\n(0, _reduceBy.default)(function (acc, elem) {\n  return acc + 1;\n}, 0);\nvar _default = countBy;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 36, "column": 0 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "countBy",
                    "generated": { "line": 36, "column": 4 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 4 }
                },
                {
                    "generated": { "line": 36, "column": 11 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 11 }
                },
                {
                    "generated": { "line": 37, "column": 0 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 14 }
                },
                {
                    "generated": { "line": 38, "column": 0 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 27 }
                },
                {
                    "generated": { "line": 38, "column": 23 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 36 }
                },
                {
                    "name": "acc",
                    "generated": { "line": 38, "column": 33 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 46 }
                },
                {
                    "generated": { "line": 38, "column": 36 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 36 }
                },
                {
                    "name": "elem",
                    "generated": { "line": 38, "column": 38 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 51 }
                },
                {
                    "generated": { "line": 38, "column": 42 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 36 }
                },
                {
                    "generated": { "line": 38, "column": 44 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 57 }
                },
                {
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "name": "acc",
                    "generated": { "line": 39, "column": 9 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "generated": { "line": 39, "column": 12 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 28, "column": 12 }
                },
                {
                    "generated": { "line": 39, "column": 15 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 28, "column": 15 }
                },
                {
                    "generated": { "line": 39, "column": 16 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 29, "column": 1 }
                },
                {
                    "generated": { "line": 40, "column": 1 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 27 }
                },
                {
                    "generated": { "line": 40, "column": 3 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 29, "column": 3 }
                },
                {
                    "generated": { "line": 40, "column": 4 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 27 }
                },
                {
                    "generated": { "line": 40, "column": 5 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "countBy",
                    "generated": { "line": 41, "column": 15 },
                    "source": "../node_modules/ramda/es/countBy.js",
                    "original": { "line": 30, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/countBy.js": "import reduceBy from './reduceBy.js';\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nvar countBy = /*#__PURE__*/reduceBy(function (acc, elem) {\n  return acc + 1;\n}, 0);\nexport default countBy;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "61597bbd6bd3d0c1a3e80b3e84416aa4",
    "cacheData": { "env": {} }
}
