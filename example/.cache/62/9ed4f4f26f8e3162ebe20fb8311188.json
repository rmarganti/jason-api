{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./internal/_curry2",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/where.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./internal/_has",
            "loc": { "line": 2, "column": 17 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/where.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_has.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2\"));\n\nvar _has2 = _interopRequireDefault(require(\"./internal/_has\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.whereEq\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nvar where =\n/*#__PURE__*/\n(0, _curry.default)(function where(spec, testObj) {\n  for (var prop in spec) {\n    if ((0, _has2.default)(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n\n  return true;\n});\nvar _default = where;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 49, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 0 }
                },
                {
                    "name": "where",
                    "generated": { "line": 49, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 4 }
                },
                {
                    "generated": { "line": 49, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 9 }
                },
                {
                    "generated": { "line": 50, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 12 }
                },
                {
                    "generated": { "line": 51, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 25 }
                },
                {
                    "generated": { "line": 51, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 33 }
                },
                {
                    "name": "where",
                    "generated": { "line": 51, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 42 }
                },
                {
                    "generated": { "line": 51, "column": 34 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 33 }
                },
                {
                    "name": "spec",
                    "generated": { "line": 51, "column": 35 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 48 }
                },
                {
                    "generated": { "line": 51, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 33 }
                },
                {
                    "name": "testObj",
                    "generated": { "line": 51, "column": 41 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 54 }
                },
                {
                    "generated": { "line": 51, "column": 48 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 33 }
                },
                {
                    "generated": { "line": 51, "column": 50 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 63 }
                },
                {
                    "generated": { "line": 52, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 40, "column": 2 }
                },
                {
                    "generated": { "line": 52, "column": 7 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 40, "column": 7 }
                },
                {
                    "name": "prop",
                    "generated": { "line": 52, "column": 11 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 40, "column": 11 }
                },
                {
                    "generated": { "line": 52, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 40, "column": 2 }
                },
                {
                    "name": "spec",
                    "generated": { "line": 52, "column": 19 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 40, "column": 19 }
                },
                {
                    "generated": { "line": 52, "column": 23 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 40, "column": 2 }
                },
                {
                    "generated": { "line": 52, "column": 25 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 40, "column": 25 }
                },
                {
                    "generated": { "line": 53, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 4 }
                },
                {
                    "generated": { "line": 53, "column": 8 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 8 }
                },
                {
                    "name": "prop",
                    "generated": { "line": 53, "column": 27 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 13 }
                },
                {
                    "generated": { "line": 53, "column": 31 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 8 }
                },
                {
                    "name": "spec",
                    "generated": { "line": 53, "column": 33 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 19 }
                },
                {
                    "generated": { "line": 53, "column": 37 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 8 }
                },
                {
                    "generated": { "line": 53, "column": 42 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 28 }
                },
                {
                    "name": "spec",
                    "generated": { "line": 53, "column": 43 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 29 }
                },
                {
                    "generated": { "line": 53, "column": 47 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 33 }
                },
                {
                    "name": "prop",
                    "generated": { "line": 53, "column": 48 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 34 }
                },
                {
                    "generated": { "line": 53, "column": 52 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 33 }
                },
                {
                    "generated": { "line": 53, "column": 53 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 29 }
                },
                {
                    "name": "testObj",
                    "generated": { "line": 53, "column": 54 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 40 }
                },
                {
                    "generated": { "line": 53, "column": 61 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 47 }
                },
                {
                    "name": "prop",
                    "generated": { "line": 53, "column": 62 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 48 }
                },
                {
                    "generated": { "line": 53, "column": 66 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 47 }
                },
                {
                    "generated": { "line": 53, "column": 67 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 29 }
                },
                {
                    "generated": { "line": 53, "column": 68 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 4 }
                },
                {
                    "generated": { "line": 53, "column": 70 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 41, "column": 56 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 42, "column": 6 }
                },
                {
                    "generated": { "line": 54, "column": 13 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 42, "column": 13 }
                },
                {
                    "generated": { "line": 54, "column": 18 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 42, "column": 6 }
                },
                {
                    "generated": { "line": 55, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 43, "column": 5 }
                },
                {
                    "generated": { "line": 56, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 44, "column": 3 }
                },
                {
                    "generated": { "line": 58, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 45, "column": 2 }
                },
                {
                    "generated": { "line": 58, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 45, "column": 9 }
                },
                {
                    "generated": { "line": 58, "column": 13 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 45, "column": 2 }
                },
                {
                    "generated": { "line": 59, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 46, "column": 1 }
                },
                {
                    "generated": { "line": 59, "column": 1 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 25 }
                },
                {
                    "generated": { "line": 59, "column": 2 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 39, "column": 0 }
                },
                {
                    "name": "where",
                    "generated": { "line": 60, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/where.js",
                    "original": { "line": 47, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/where.js": "import _curry2 from './internal/_curry2';\nimport _has from './internal/_has';\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.whereEq\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nvar where = /*#__PURE__*/_curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n  return true;\n});\nexport default where;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "5719b49ad29f9578b90ae4344fa0b285",
    "cacheData": { "env": {} }
}
