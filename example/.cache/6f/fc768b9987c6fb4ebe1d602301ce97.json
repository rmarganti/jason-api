{
    "id": "../node_modules/ramda/es/both.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry2.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/both.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./internal/_isFunction.js",
            "loc": { "line": 2, "column": 24 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/both.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_isFunction.js"
        },
        {
            "name": "./and.js",
            "loc": { "line": 3, "column": 16 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/both.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/and.js"
        },
        {
            "name": "./lift.js",
            "loc": { "line": 4, "column": 17 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/both.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/lift.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _isFunction2 = _interopRequireDefault(require(\"./internal/_isFunction.js\"));\n\nvar _and = _interopRequireDefault(require(\"./and.js\"));\n\nvar _lift = _interopRequireDefault(require(\"./lift.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      const gt10 = R.gt(R.__, 10)\n *      const lt20 = R.lt(R.__, 20)\n *      const f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n *\n *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)\n *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]\n */\nvar both =\n/*#__PURE__*/\n(0, _curry.default)(function both(f, g) {\n  return (0, _isFunction2.default)(f) ? function _both() {\n    return f.apply(this, arguments) && g.apply(this, arguments);\n  } : (0, _lift.default)(_and.default)(f, g);\n});\nvar _default = both;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 18, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 6, "column": 0 }
                },
                {
                    "generated": { "line": 49, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 0 }
                },
                {
                    "name": "both",
                    "generated": { "line": 49, "column": 4 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 4 }
                },
                {
                    "generated": { "line": 49, "column": 8 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 8 }
                },
                {
                    "generated": { "line": 50, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 11 }
                },
                {
                    "generated": { "line": 51, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 24 }
                },
                {
                    "generated": { "line": 51, "column": 20 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 32 }
                },
                {
                    "name": "both",
                    "generated": { "line": 51, "column": 29 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 41 }
                },
                {
                    "generated": { "line": 51, "column": 33 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 32 }
                },
                {
                    "name": "f",
                    "generated": { "line": 51, "column": 34 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 46 }
                },
                {
                    "generated": { "line": 51, "column": 35 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 32 }
                },
                {
                    "name": "g",
                    "generated": { "line": 51, "column": 37 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 49 }
                },
                {
                    "generated": { "line": 51, "column": 38 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 32 }
                },
                {
                    "generated": { "line": 51, "column": 40 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 52 }
                },
                {
                    "generated": { "line": 52, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 2 }
                },
                {
                    "generated": { "line": 52, "column": 9 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 9 }
                },
                {
                    "name": "f",
                    "generated": { "line": 52, "column": 35 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 21 }
                },
                {
                    "generated": { "line": 52, "column": 36 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 9 }
                },
                {
                    "generated": { "line": 52, "column": 40 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 26 }
                },
                {
                    "name": "_both",
                    "generated": { "line": 52, "column": 49 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 35 }
                },
                {
                    "generated": { "line": 52, "column": 54 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 26 }
                },
                {
                    "generated": { "line": 52, "column": 57 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 43 }
                },
                {
                    "generated": { "line": 53, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 4 }
                },
                {
                    "name": "f",
                    "generated": { "line": 53, "column": 11 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 11 }
                },
                {
                    "generated": { "line": 53, "column": 12 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 12 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 53, "column": 13 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 13 }
                },
                {
                    "generated": { "line": 53, "column": 18 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 11 }
                },
                {
                    "generated": { "line": 53, "column": 19 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 19 }
                },
                {
                    "generated": { "line": 53, "column": 23 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 11 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 53, "column": 25 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 25 }
                },
                {
                    "generated": { "line": 53, "column": 34 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 11 }
                },
                {
                    "name": "g",
                    "generated": { "line": 53, "column": 39 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 39 }
                },
                {
                    "generated": { "line": 53, "column": 40 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 40 }
                },
                {
                    "name": "apply",
                    "generated": { "line": 53, "column": 41 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 41 }
                },
                {
                    "generated": { "line": 53, "column": 46 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 39 }
                },
                {
                    "generated": { "line": 53, "column": 47 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 47 }
                },
                {
                    "generated": { "line": 53, "column": 51 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 39 }
                },
                {
                    "name": "arguments",
                    "generated": { "line": 53, "column": 53 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 53 }
                },
                {
                    "generated": { "line": 53, "column": 62 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 39 }
                },
                {
                    "generated": { "line": 53, "column": 63 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 39, "column": 4 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 40, "column": 3 }
                },
                {
                    "generated": { "line": 54, "column": 3 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 9 }
                },
                {
                    "generated": { "line": 54, "column": 6 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 40, "column": 6 }
                },
                {
                    "name": "and",
                    "generated": { "line": 54, "column": 25 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 40, "column": 11 }
                },
                {
                    "generated": { "line": 54, "column": 37 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 40, "column": 6 }
                },
                {
                    "name": "f",
                    "generated": { "line": 54, "column": 39 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 40, "column": 16 }
                },
                {
                    "generated": { "line": 54, "column": 40 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 40, "column": 6 }
                },
                {
                    "name": "g",
                    "generated": { "line": 54, "column": 42 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 40, "column": 19 }
                },
                {
                    "generated": { "line": 54, "column": 43 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 40, "column": 6 }
                },
                {
                    "generated": { "line": 54, "column": 44 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 38, "column": 2 }
                },
                {
                    "generated": { "line": 55, "column": 0 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 41, "column": 1 }
                },
                {
                    "generated": { "line": 55, "column": 1 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 24 }
                },
                {
                    "generated": { "line": 55, "column": 2 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 37, "column": 0 }
                },
                {
                    "name": "both",
                    "generated": { "line": 56, "column": 15 },
                    "source": "../node_modules/ramda/es/both.js",
                    "original": { "line": 42, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/both.js": "import _curry2 from './internal/_curry2.js';\nimport _isFunction from './internal/_isFunction.js';\nimport and from './and.js';\nimport lift from './lift.js';\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      const gt10 = R.gt(R.__, 10)\n *      const lt20 = R.lt(R.__, 20)\n *      const f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n *\n *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)\n *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]\n */\nvar both = /*#__PURE__*/_curry2(function both(f, g) {\n  return _isFunction(f) ? function _both() {\n    return f.apply(this, arguments) && g.apply(this, arguments);\n  } : lift(and)(f, g);\n});\nexport default both;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "f3337ae662010eb82d9466ba787f6690",
    "cacheData": { "env": {} }
}
