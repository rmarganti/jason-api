{
    "id": "../node_modules/ramda/es/split.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./invoker.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/split.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/invoker.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _invoker = _interopRequireDefault(require(\"./invoker.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      const pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nvar split =\n/*#__PURE__*/\n(0, _invoker.default)(1, 'split');\nvar _default = split;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 32, "column": 0 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 0 }
                },
                {
                    "name": "split",
                    "generated": { "line": 32, "column": 4 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 4 }
                },
                {
                    "generated": { "line": 32, "column": 9 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 9 }
                },
                {
                    "generated": { "line": 33, "column": 0 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 12 }
                },
                {
                    "generated": { "line": 34, "column": 0 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 25 }
                },
                {
                    "generated": { "line": 34, "column": 22 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 33 }
                },
                {
                    "generated": { "line": 34, "column": 23 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 25 }
                },
                {
                    "generated": { "line": 34, "column": 25 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 36 }
                },
                {
                    "generated": { "line": 34, "column": 32 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 25 }
                },
                {
                    "generated": { "line": 34, "column": 33 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 23, "column": 0 }
                },
                {
                    "name": "split",
                    "generated": { "line": 35, "column": 15 },
                    "source": "../node_modules/ramda/es/split.js",
                    "original": { "line": 24, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/split.js": "import invoker from './invoker.js';\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      const pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nvar split = /*#__PURE__*/invoker(1, 'split');\nexport default split;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "70dd0aee073d4ba0e0f363b50013abd0",
    "cacheData": { "env": {} }
}
