{
    "id": "../node_modules/ramda/es/match.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry2.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/match.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry2.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nvar match =\n/*#__PURE__*/\n(0, _curry.default)(function match(rx, str) {\n  return str.match(rx) || [];\n});\nvar _default = match;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 33, "column": 0 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 0 }
                },
                {
                    "name": "match",
                    "generated": { "line": 33, "column": 4 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 4 }
                },
                {
                    "generated": { "line": 33, "column": 9 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 9 }
                },
                {
                    "generated": { "line": 34, "column": 0 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 12 }
                },
                {
                    "generated": { "line": 35, "column": 0 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 25 }
                },
                {
                    "generated": { "line": 35, "column": 20 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 33 }
                },
                {
                    "name": "match",
                    "generated": { "line": 35, "column": 29 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 42 }
                },
                {
                    "generated": { "line": 35, "column": 34 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 33 }
                },
                {
                    "name": "rx",
                    "generated": { "line": 35, "column": 35 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 48 }
                },
                {
                    "generated": { "line": 35, "column": 37 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 33 }
                },
                {
                    "name": "str",
                    "generated": { "line": 35, "column": 39 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 52 }
                },
                {
                    "generated": { "line": 35, "column": 42 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 33 }
                },
                {
                    "generated": { "line": 35, "column": 44 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 57 }
                },
                {
                    "generated": { "line": 36, "column": 0 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 25, "column": 2 }
                },
                {
                    "name": "str",
                    "generated": { "line": 36, "column": 9 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 25, "column": 9 }
                },
                {
                    "generated": { "line": 36, "column": 12 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 25, "column": 12 }
                },
                {
                    "name": "match",
                    "generated": { "line": 36, "column": 13 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 25, "column": 13 }
                },
                {
                    "generated": { "line": 36, "column": 18 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 25, "column": 9 }
                },
                {
                    "name": "rx",
                    "generated": { "line": 36, "column": 19 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 25, "column": 19 }
                },
                {
                    "generated": { "line": 36, "column": 21 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 25, "column": 9 }
                },
                {
                    "generated": { "line": 36, "column": 26 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 25, "column": 26 }
                },
                {
                    "generated": { "line": 36, "column": 28 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 25, "column": 2 }
                },
                {
                    "generated": { "line": 37, "column": 0 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 26, "column": 1 }
                },
                {
                    "generated": { "line": 37, "column": 1 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 25 }
                },
                {
                    "generated": { "line": 37, "column": 2 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 24, "column": 0 }
                },
                {
                    "name": "match",
                    "generated": { "line": 38, "column": 15 },
                    "source": "../node_modules/ramda/es/match.js",
                    "original": { "line": 27, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/match.js": "import _curry2 from './internal/_curry2.js';\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nvar match = /*#__PURE__*/_curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\nexport default match;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "34bd35fb7e0c9d9e8545e97832f89cb1",
    "cacheData": { "env": {} }
}
