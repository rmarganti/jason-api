{
    "id": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558467235000
        },
        {
            "name": "./internal/_curry3",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/internal/_curry3.js"
        },
        {
            "name": "./mergeWithKey",
            "loc": { "line": 2, "column": 25 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ts-json-api/node_modules/ramda/es/mergeWithKey.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry3\"));\n\nvar _mergeWithKey = _interopRequireDefault(require(\"./mergeWithKey\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nvar mergeWith =\n/*#__PURE__*/\n(0, _curry.default)(function mergeWith(fn, l, r) {\n  return (0, _mergeWithKey.default)(function (_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\nvar _default = mergeWith;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 37, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "mergeWith",
                    "generated": { "line": 37, "column": 4 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 4 }
                },
                {
                    "generated": { "line": 37, "column": 13 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 13 }
                },
                {
                    "generated": { "line": 38, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 16 }
                },
                {
                    "generated": { "line": 39, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 29 }
                },
                {
                    "generated": { "line": 39, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "name": "mergeWith",
                    "generated": { "line": 39, "column": 29 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 46 }
                },
                {
                    "generated": { "line": 39, "column": 38 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 39, "column": 39 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 56 }
                },
                {
                    "generated": { "line": 39, "column": 41 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "name": "l",
                    "generated": { "line": 39, "column": 43 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 60 }
                },
                {
                    "generated": { "line": 39, "column": 44 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "name": "r",
                    "generated": { "line": 39, "column": 46 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 63 }
                },
                {
                    "generated": { "line": 39, "column": 47 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 37 }
                },
                {
                    "generated": { "line": 39, "column": 49 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 66 }
                },
                {
                    "generated": { "line": 40, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "generated": { "line": 40, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "generated": { "line": 40, "column": 36 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 22 }
                },
                {
                    "name": "_",
                    "generated": { "line": 40, "column": 46 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 32 }
                },
                {
                    "generated": { "line": 40, "column": 47 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 22 }
                },
                {
                    "name": "_l",
                    "generated": { "line": 40, "column": 49 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 35 }
                },
                {
                    "generated": { "line": 40, "column": 51 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 22 }
                },
                {
                    "name": "_r",
                    "generated": { "line": 40, "column": 53 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 39 }
                },
                {
                    "generated": { "line": 40, "column": 55 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 22 }
                },
                {
                    "generated": { "line": 40, "column": 57 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 43 }
                },
                {
                    "generated": { "line": 41, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 41, "column": 11 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 29, "column": 11 }
                },
                {
                    "generated": { "line": 41, "column": 13 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 29, "column": 13 }
                },
                {
                    "name": "_l",
                    "generated": { "line": 41, "column": 14 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 29, "column": 14 }
                },
                {
                    "generated": { "line": 41, "column": 16 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 29, "column": 13 }
                },
                {
                    "name": "_r",
                    "generated": { "line": 41, "column": 18 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 29, "column": 18 }
                },
                {
                    "generated": { "line": 41, "column": 20 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 29, "column": 13 }
                },
                {
                    "generated": { "line": 41, "column": 21 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 29, "column": 4 }
                },
                {
                    "generated": { "line": 42, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 30, "column": 3 }
                },
                {
                    "generated": { "line": 42, "column": 3 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "name": "l",
                    "generated": { "line": 42, "column": 5 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 30, "column": 5 }
                },
                {
                    "generated": { "line": 42, "column": 6 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "name": "r",
                    "generated": { "line": 42, "column": 8 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 30, "column": 8 }
                },
                {
                    "generated": { "line": 42, "column": 9 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 9 }
                },
                {
                    "generated": { "line": 42, "column": 10 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 28, "column": 2 }
                },
                {
                    "generated": { "line": 43, "column": 0 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 31, "column": 1 }
                },
                {
                    "generated": { "line": 43, "column": 1 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 29 }
                },
                {
                    "generated": { "line": 43, "column": 2 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 27, "column": 0 }
                },
                {
                    "name": "mergeWith",
                    "generated": { "line": 44, "column": 15 },
                    "source": "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js",
                    "original": { "line": 32, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ts-json-api/node_modules/ramda/es/mergeWith.js": "import _curry3 from './internal/_curry3';\nimport mergeWithKey from './mergeWithKey';\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nvar mergeWith = /*#__PURE__*/_curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function (_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\nexport default mergeWith;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "571c2f69cce02c303b38b9d2f499b65f",
    "cacheData": { "env": {} }
}
