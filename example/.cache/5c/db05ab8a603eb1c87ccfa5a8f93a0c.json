{
    "id": "../node_modules/ramda/es/chain.js",
    "dependencies": [
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/example/package.json",
            "includedInParent": true,
            "mtime": 1559061771000
        },
        {
            "name": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/package.json",
            "includedInParent": true,
            "mtime": 1558469608000
        },
        {
            "name": "./internal/_curry2.js",
            "loc": { "line": 1, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/chain.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_curry2.js"
        },
        {
            "name": "./internal/_dispatchable.js",
            "loc": { "line": 2, "column": 26 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/chain.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_dispatchable.js"
        },
        {
            "name": "./internal/_makeFlat.js",
            "loc": { "line": 3, "column": 22 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/chain.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_makeFlat.js"
        },
        {
            "name": "./internal/_xchain.js",
            "loc": { "line": 4, "column": 20 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/chain.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/internal/_xchain.js"
        },
        {
            "name": "./map.js",
            "loc": { "line": 5, "column": 16 },
            "parent": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/chain.js",
            "resolved": "/Users/rmarganti/code/_packages+libraries/jason-api-next/node_modules/ramda/es/map.js"
        }
    ],
    "generated": {
        "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _dispatchable2 = _interopRequireDefault(require(\"./internal/_dispatchable.js\"));\n\nvar _makeFlat2 = _interopRequireDefault(require(\"./internal/_makeFlat.js\"));\n\nvar _xchain2 = _interopRequireDefault(require(\"./internal/_xchain.js\"));\n\nvar _map = _interopRequireDefault(require(\"./map.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries.\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      const duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain =\n/*#__PURE__*/\n(0, _curry.default)(\n/*#__PURE__*/\n(0, _dispatchable2.default)(['fantasy-land/chain', 'chain'], _xchain2.default, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n\n  return (0, _makeFlat2.default)(false)((0, _map.default)(fn, monad));\n}));\nvar _default = chain;\nexports.default = _default;"
    },
    "sourceMaps": {
        "js": {
            "mappings": [
                {
                    "generated": { "line": 8, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 1, "column": 0 }
                },
                {
                    "generated": { "line": 10, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 2, "column": 0 }
                },
                {
                    "generated": { "line": 12, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 3, "column": 0 }
                },
                {
                    "generated": { "line": 14, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 4, "column": 0 }
                },
                {
                    "generated": { "line": 16, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 5, "column": 0 }
                },
                {
                    "generated": { "line": 20, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 7, "column": 0 }
                },
                {
                    "generated": { "line": 46, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 0 }
                },
                {
                    "name": "chain",
                    "generated": { "line": 46, "column": 4 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 4 }
                },
                {
                    "generated": { "line": 46, "column": 9 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 9 }
                },
                {
                    "generated": { "line": 47, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 12 }
                },
                {
                    "generated": { "line": 48, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 25 }
                },
                {
                    "generated": { "line": 49, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 34 }
                },
                {
                    "generated": { "line": 50, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 47 }
                },
                {
                    "generated": { "line": 50, "column": 28 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 61 }
                },
                {
                    "generated": { "line": 50, "column": 29 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 62 }
                },
                {
                    "generated": { "line": 50, "column": 49 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 61 }
                },
                {
                    "generated": { "line": 50, "column": 51 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 84 }
                },
                {
                    "generated": { "line": 50, "column": 58 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 61 }
                },
                {
                    "generated": { "line": 50, "column": 59 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 47 }
                },
                {
                    "name": "_xchain",
                    "generated": { "line": 50, "column": 61 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 94 }
                },
                {
                    "generated": { "line": 50, "column": 77 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 47 }
                },
                {
                    "generated": { "line": 50, "column": 79 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 103 }
                },
                {
                    "name": "chain",
                    "generated": { "line": 50, "column": 88 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 112 }
                },
                {
                    "generated": { "line": 50, "column": 93 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 103 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 50, "column": 94 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 118 }
                },
                {
                    "generated": { "line": 50, "column": 96 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 103 }
                },
                {
                    "name": "monad",
                    "generated": { "line": 50, "column": 98 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 122 }
                },
                {
                    "generated": { "line": 50, "column": 103 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 103 }
                },
                {
                    "generated": { "line": 50, "column": 105 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 129 }
                },
                {
                    "generated": { "line": 51, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 34, "column": 2 }
                },
                {
                    "generated": { "line": 51, "column": 6 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 34, "column": 6 }
                },
                {
                    "name": "monad",
                    "generated": { "line": 51, "column": 13 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 34, "column": 13 }
                },
                {
                    "generated": { "line": 51, "column": 18 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 34, "column": 6 }
                },
                {
                    "generated": { "line": 51, "column": 23 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 34, "column": 23 }
                },
                {
                    "generated": { "line": 51, "column": 33 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 34, "column": 2 }
                },
                {
                    "generated": { "line": 51, "column": 35 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 34, "column": 35 }
                },
                {
                    "generated": { "line": 52, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 35, "column": 4 }
                },
                {
                    "generated": { "line": 52, "column": 11 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 35, "column": 11 }
                },
                {
                    "name": "x",
                    "generated": { "line": 52, "column": 21 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 35, "column": 21 }
                },
                {
                    "generated": { "line": 52, "column": 22 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 35, "column": 11 }
                },
                {
                    "generated": { "line": 52, "column": 24 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 35, "column": 24 }
                },
                {
                    "generated": { "line": 53, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 6 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 53, "column": 13 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 13 }
                },
                {
                    "generated": { "line": 53, "column": 15 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 15 }
                },
                {
                    "name": "monad",
                    "generated": { "line": 53, "column": 16 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 16 }
                },
                {
                    "generated": { "line": 53, "column": 21 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 21 }
                },
                {
                    "name": "x",
                    "generated": { "line": 53, "column": 22 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 22 }
                },
                {
                    "generated": { "line": 53, "column": 23 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 21 }
                },
                {
                    "generated": { "line": 53, "column": 24 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 15 }
                },
                {
                    "generated": { "line": 53, "column": 25 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 13 }
                },
                {
                    "name": "x",
                    "generated": { "line": 53, "column": 26 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 26 }
                },
                {
                    "generated": { "line": 53, "column": 27 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 13 }
                },
                {
                    "generated": { "line": 53, "column": 28 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 36, "column": 6 }
                },
                {
                    "generated": { "line": 54, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 37, "column": 5 }
                },
                {
                    "generated": { "line": 54, "column": 5 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 35, "column": 4 }
                },
                {
                    "generated": { "line": 55, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 38, "column": 3 }
                },
                {
                    "generated": { "line": 57, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 2 }
                },
                {
                    "generated": { "line": 57, "column": 9 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 9 }
                },
                {
                    "generated": { "line": 57, "column": 33 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 19 }
                },
                {
                    "generated": { "line": 57, "column": 38 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 9 }
                },
                {
                    "generated": { "line": 57, "column": 40 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 26 }
                },
                {
                    "name": "fn",
                    "generated": { "line": 57, "column": 58 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 30 }
                },
                {
                    "generated": { "line": 57, "column": 60 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 26 }
                },
                {
                    "name": "monad",
                    "generated": { "line": 57, "column": 62 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 34 }
                },
                {
                    "generated": { "line": 57, "column": 67 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 26 }
                },
                {
                    "generated": { "line": 57, "column": 68 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 9 }
                },
                {
                    "generated": { "line": 57, "column": 69 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 39, "column": 2 }
                },
                {
                    "generated": { "line": 58, "column": 0 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 40, "column": 1 }
                },
                {
                    "generated": { "line": 58, "column": 1 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 47 }
                },
                {
                    "generated": { "line": 58, "column": 2 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 25 }
                },
                {
                    "generated": { "line": 58, "column": 3 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 33, "column": 0 }
                },
                {
                    "name": "chain",
                    "generated": { "line": 59, "column": 15 },
                    "source": "../node_modules/ramda/es/chain.js",
                    "original": { "line": 41, "column": 15 }
                }
            ],
            "sources": {
                "../node_modules/ramda/es/chain.js": "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _makeFlat from './internal/_makeFlat.js';\nimport _xchain from './internal/_xchain.js';\nimport map from './map.js';\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries.\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      const duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\nexport default chain;"
            },
            "lineCount": null
        }
    },
    "error": null,
    "hash": "2f6de68537416c8bcc8095a189c54341",
    "cacheData": { "env": {} }
}
